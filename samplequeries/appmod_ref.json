[
  {
    "description": "AppCAT for Java : # of DAU",
    "query": "let start = startofday(ago(28d));\nlet end = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal = tobool(data.internal);\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalUsers = iff(isempty(count), 0, count)\n| extend ExternalTotalUsers = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Users'] = InternalTotalUsers, ['External Total Users'] = ExternalTotalUsers\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Apps",
    "query": "let processedTable = RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| extend data = parse_json(message)\n| extend internal = tobool(data.internal)\n| where not(isempty(pid));\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(pid) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(pid) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalApps = iff(isempty(count), 0, count)\n| extend ExternalTotalApps = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Apps'] = InternalTotalApps, ['External Total Apps'] = ExternalTotalApps\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Lines Addressed (last 28 days)",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| extend count = toint(dimensions.report_issues)\n| summarize ['Total Lines'] = sum(count) by bin(timestamp, 1d)\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Issues Found",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize ['Total Issues'] = count() by bin(timestamp, 1d)"
  },
  {
    "description": "AppCAT for Java : # of MEU",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter vscodeMachineIdMap on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal  = iff(tobool(data.internal), 'Internal Users', 'External Users');\nprocessedTable\n| where not(isempty(machineId))\n| summarize operation = dcount(operation_Id) by machineId, internal\n| where operation >= 2\n| summarize multiDayUsers = dcount(machineId) by internal\n| render list"
  },
  {
    "description": "AppCAT for Java : # of MAU",
    "query": "let start = startofday(ago(28d));\nlet end = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal = iff(tobool(data.internal), 'Internal Users', 'External Users');\nprocessedTable\n| summarize count = dcount(machineId) by internal\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Apps",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| where not(isempty(pid))\n| extend data = parse_json(message)\n| extend internal = iff(tobool(data.internal), 'Internal', 'External')\n| summarize TotalApps = dcount(pid) by internal\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Issues Found",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize count = count()"
  },
  {
    "description": "AppCAT for Java : # of DEU",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter vscodeMachineIdMap on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal  = tobool(data.internal)\n| where not(isempty(machineId))\n| summarize operation = dcount(operation_Id) by machineId, internal, bin(timestamp, 1d)\n| where operation >= 2;\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalUsers = iff(isempty(count), 0, count)\n| extend ExternalTotalUsers = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Users'] = InternalTotalUsers, ['External Total Users'] = ExternalTotalUsers\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Lines Addressed",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| extend count = toint(dimensions.report_issues)\n| summarize TotalApps = sum(count)\n| render list"
  },
  {
    "description": "AppCAT for Java : Top 10 Issue Categories",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet labelTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/report'\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend labels = tostring(dimensions.report_labels)\n| extend labelList = split(labels, ',')\n| mv-expand labelEle = labelList\n| extend label = tostring(labelEle)\n| project operation_Id, label;\nlet categoryTable = labelTable\n| where label startswith \"category=\"\n| extend category = substring(label, 9);\nlet sourceCategoryTable = labelTable\n| where label startswith \"source-category=\"\n| extend sourceCategory = substring(label, 16);\ncategoryTable\n| join kind=leftouter sourceCategoryTable on operation_Id\n| summarize Count = count() by category, sourceCategory\n| sort by Count desc\n| limit 10\n| project Category = category, [\"Source category\"] = sourceCategory, Count\n| render list"
  },
  {
    "description": "AppCAT for Java : Success Runs",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| summarize count()\n| render list"
  },
  {
    "description": "AppCAT for Java : Success Runs (Unique Machines)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| summarize dcount(machineId)\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs (CLI)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'appcat'\n| summarize ['Analyses'] = dcount(operation_Id), ['Total Users'] = dcount(machineId) by bin(timestamp, 1d)\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs (VS Code Ext)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'Microsoft.migrate-java-to-azure' or caller == 'vscjava.migrate-java-to-azure'\n| summarize ['Analyses'] = dcount(operation_Id), ['Total Users'] = dcount(machineId) by bin(timestamp, 1d)\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs (CLI)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'appcat'\n| summarize ['CLI Analyses'] = dcount(operation_Id)\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs (VS Code Ext)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'Microsoft.migrate-java-to-azure' or caller == 'vscjava.migrate-java-to-azure'\n| summarize ['VS Code Ext Analysis'] = dcount(operation_Id)\n| render list"
  },
  {
    "description": "AppCAT for Java : Analyze Targets",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend targets = tostring(dimensions.option_target)\n| extend targetList = split(targets, ',')\n| mv-expand targetEle = targetList\n| extend target = tostring(targetEle)\n| where not(isempty(target))\n| summarize Count = count() by target\n| sort by Count desc\n| render list"
  },
  {
    "description": "AppCAT for Java : Duration of Runs",
    "query": "// let start = startofday(ago(28d));\n// let end   = startofday(now());\n// RawEventsTraces\n// | where timestamp between (start .. end)\n// | where operation_Name == 'java/appcat/command'\n// | extend data = parse_json(message)\n// | extend command = tostring(data.message)\n// | where command == 'analyze'\n// | extend dimensions = parse_json(customDimensions)\n// | extend status = tostring(dimensions.status)\n// | where status == 'end'\n// | extend val = tolong(dimensions.duration)\n// | extend DurationsBucket = case (\n//     val > 3600000,\n//     \"> 1hr\",\n//     val > 1800000 and val <= 3600000,\n//     \"30-60 mins\",\n//     val > 900000 and val <= 1800000,\n//     \"15-30 mins\",\n//     val > 600000 and val <= 900000 ,\n//     \"10-15 mins\",\n//     val > 300000 and val <= 600000 ,\n//     \"5-10 mins\",\n//     val > 300000 and val <= 480000 ,\n//     \"5-8 mins\",\n//     val > 180000 and val <= 300000 ,\n//     \"3-5 mins\",\n//     val > 120000 and val <= 180000 ,\n//     \"2 mins\",\n//     val > 60000 and val <= 120000,\n//     \"1 min\",\n//     val > 30000 and val <= 60000,\n//     \"30-60 seconds\",\n//     \"less than 30 seconds\"\n//   )\n// | summarize Runs=count() by DurationsBucket\n// | order by Runs desc\n// | render list\n\nlet start = startofday(ago(28d));\nlet end   = startofday(now());\nlet reportTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/report'\n| distinct operation_Id;\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| where operation_Id in (reportTable)\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend appcatVersion = tostring(dimensions.appcatversion)\n| where appcatVersion != 'latest'\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| extend val = tolong(dimensions.duration)\n| extend DurationsBucket = case (\n    val > 3600000,\n    \"> 1hr\",\n    val > 1800000 and val <= 3600000,\n    \"30-60 mins\",\n    val > 900000 and val <= 1800000,\n    \"15-30 mins\",\n    val > 600000 and val <= 900000 ,\n    \"10-15 mins\",\n    val > 300000 and val <= 600000 ,\n    \"5-10 mins\",\n    val > 300000 and val <= 480000 ,\n    \"5-8 mins\",\n    val > 180000 and val <= 300000 ,\n    \"3-5 mins\",\n    val > 120000 and val <= 180000 ,\n    \"2 mins\",\n    val > 60000 and val <= 120000,\n    \"1 min\",\n    val > 30000 and val <= 60000,\n    \"30-60 seconds\",\n    \"less than 30 seconds\"\n  )\n| summarize Runs=count() by DurationsBucket\n| order by Runs desc\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs (Successes vs. Failures)",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet analyzeTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status);\nlet startTable = analyzeTable\n| where status == 'start'\n| distinct operation_Id, status;\nlet endTable = analyzeTable\n| where status == 'end'\n| distinct operation_Id, status;\nstartTable\n| join kind=fullouter endTable on operation_Id\n| extend Success = iff(isempty(status1), 'Failed', 'Succeeded')\n| summarize Total = count() by Success\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs with Custom Rules",
    "query": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status)\n| where status == 'start'\n| extend rules = iff(isempty(dimensions.option_rules), 'No custom rules', 'Custom rules')\n| summarize Count = count() by rules\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Runs per App",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| extend data = parse_json(message)\n| where not(isempty(pid))\n| summarize val = count() by pid\n| extend RunsBucket = case (\n    val > 100,\n    \"> 100\",\n    val > 50 and val <= 100 ,\n    \"51-100\",\n    val > 20 and val <= 50 ,\n    \"21-50\",\n    val > 10 and val <= 20 ,\n    \"11-20\",\n    val > 5 and val <= 10 ,\n    \"6-10\",\n    val > 2 and val <= 5,\n    \"3-5\",\n    val == 2,\n    \"2\",\n    \"1\"\n  )\n| summarize Runs=count() by RunsBucket\n| order by Runs desc\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Issues per Run (CLI)",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = dimensions.callerid\n| where callerId == 'appcat'\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize val = count() by operation_Id\n| extend RunsBucket = case (\n    val > 500,\n    \">500\",\n    val > 100 and val <= 500,\n    \"101-500\",\n    val > 50 and val <= 100,\n    \"51-100\",\n    val > 10 and val <= 50,\n    \"11-50\",\n    val > 5 and val <= 10,\n    \"6-10\",\n    val > 1 and val <= 5,\n    \"2-5\",\n    \"1\"\n  )\n| summarize Issues=count() by RunsBucket\n| order by Issues desc\n| render list"
  },
  {
    "description": "AppCAT for Java : # of Issue per Run (VS Code Ext)",
    "query": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = dimensions.callerid\n| where callerId == 'Microsoft.migrate-java-to-azure'\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize val = count() by operation_Id\n| extend RunsBucket = case (\n    val > 500,\n    \">500\",\n    val > 100 and val <= 500,\n    \"101-500\",\n    val > 50 and val <= 100,\n    \"51-100\",\n    val > 10 and val <= 50,\n    \"11-50\",\n    val > 5 and val <= 10,\n    \"6-10\",\n    val > 1 and val <= 5,\n    \"2-5\",\n    \"1\"\n  )\n| summarize Issues=count() by RunsBucket\n| order by Issues desc\n| render list"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of LLM Calls",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n// | where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/panel.request\"\n| where Properties.conversationid in (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n// | where ExtensionName == 'Microsoft.migrate-java-to-azure'\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project Properties.conversationid)\n)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize count=count() "
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of LLM Calls",
    "query": "let start=startofday(<_startTime>);\nlet end=startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n// | where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/panel.request\"\n| where Properties.conversationid in (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n// | where ExtensionName == 'Microsoft.migrate-java-to-azure'\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project Properties.conversationid, ClientTimestamp)\n)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize count=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Installations",
    "query": "fact_activity_daily_ext\n| where ActivityDay between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ActivityDay >= datetime(2025-05-20)\n| where ExtensionId in (\"microsoft.migrate-java-to-azure\", 'vscjava.migrate-java-to-azure')\n| where Action in ('Install')\n| join kind=leftouter (IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Installations",
    "query": "fact_activity_daily_ext\n| where ActivityDay >= startofday(<_startTime>) and ActivityDay  <= startofday(<_endTime>) - 1s\n| where ActivityDay >= datetime(2025-05-20)\n| where ExtensionId in (\"microsoft.migrate-java-to-azure\", 'vscjava.migrate-java-to-azure')\n| where Action in ('Install')\n| join kind=leftouter (IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count() by ActivityDay"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Migration Avg Tokens",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| where isnotempty(DevDeviceId)\n| extend m=parse_json(Measures)\n| extend totalTokens=tolong(iif(isnotempty(m['totaltokens']), m['totaltokens'], m['totaltokensused']))\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, EventName, ServerTimestamp\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. <_endTime>)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. <_endTime>)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where isnotempty(DevDeviceId)\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project conversationId, totalTokens, DevDeviceId, VSCodeMachineId, ClientTimestamp, ServerTimestamp, EventName\n) on conversationId, DevDeviceId\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, ServerTimestamp, EventName\n| join kind=leftouter (database('VSCodeInsights').IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n)\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize ceiling(sum(totalTokens)/todecimal(dcount(DevDeviceId)))"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Migration Avg Tokens",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| where isnotempty(DevDeviceId)\n| extend m=parse_json(Measures)\n| extend totalTokens=tolong(iif(isnotempty(m['totaltokens']), m['totaltokens'], m['totaltokensused']))\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, EventName, ServerTimestamp\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. <_endTime>)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. <_endTime>)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where isnotempty(DevDeviceId)\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project conversationId, totalTokens, DevDeviceId, VSCodeMachineId, ClientTimestamp, ServerTimestamp, EventName\n) on conversationId, DevDeviceId\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, ServerTimestamp, EventName\n| join kind=leftouter (database('VSCodeInsights').IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n)\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize tokenCount=ceiling(sum(totalTokens) / todecimal(dcount(DevDeviceId))) by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of MEU",
    "query": "let start = startofday(ago(28d));\nlet end = startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. (end - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize operation=count() by DevDeviceId\n| where operation >= 2\n| summarize dcount(DevDeviceId)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of DEU",
    "query": "let _endOfYesterday = startofday(<_endTime>);\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize operation=count() by DevDeviceId, ClientTimestamp=bin(ClientTimestamp, 1d)\n| where operation >= 2\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp,1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Apps",
    "query": "let migrationAppIds = RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p['hashedappid'])\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet appcatAppIds = cluster('ddtelai').database('Copilot').RawEventsTraces\n| where timestamp >= datetime(2025-05-20)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = tostring(dimensions.callerid)\n| where callerId != 'appcat'\n| extend AppId = tostring(dimensions.project_identity), ClientTimestamp = timestamp\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet allAppIds = union migrationAppIds, appcatAppIds;\nallAppIds\n| summarize dcount(AppId)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Apps",
    "query": "let excludedAppIds = dynamic([\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\"\n]);\nlet migrationAppIds = RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p['hashedappid'])\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet appcatAppIds = cluster('ddtelai').database('Copilot').RawEventsTraces\n| where timestamp >= datetime(2025-05-20)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = tostring(dimensions.callerid)\n| where callerId != 'appcat'\n| extend AppId = tostring(dimensions.project_identity), ClientTimestamp = timestamp\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet allAppIds = union migrationAppIds, appcatAppIds;\nunion\n(\n    allAppIds\n    | summarize count = dcount(AppId) by bin(ClientTimestamp, 1d)\n    | extend AppIdGroup = \"All\"\n),\n(\n    allAppIds\n    | where AppId in (excludedAppIds)\n    | summarize count = dcount(AppId) by bin(ClientTimestamp, 1d)\n    | extend AppIdGroup = \"Samples\"\n)\n| order by ClientTimestamp asc, AppIdGroup"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of MAU",
    "query": "\nlet start=startofday(ago(28d));\nlet end=startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (<_startTime> .. (end - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize dcount(DevDeviceId)\n"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of DAU",
    "query": "let _endOfYesterday = startofday(<_endTime>);\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of code lines proposed",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/change/propose\"\n| extend m=parse_json(Measures)\n| extend lineofchanges=tolong(m['lineofchanges'])\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize lineofchanges=sum(lineofchanges)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of code lines proposed",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/change/propose\"\n| extend m=parse_json(Measures)\n| extend lineofchanges=tolong(m['lineofchanges'])\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize lineofchanges=sum(lineofchanges) by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Top 20 formulas applied",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| extend formula=tostring(Properties.formula), result=tostring(Properties.result), isMicrosoft=tobool(Properties.ismicrosoft)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count() by formula, isMicrosoft\n| order by count desc\n| limit 20"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : % of retained edits when applying formulas",
    "query": "let start = startofday(ago(28d));\nlet end = startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project requestId = tostring(Properties.requestid), conversationId, VSCodeMachineId, DevDeviceId\n) on conversationId, VSCodeMachineId, DevDeviceId\n| project requestId\n| distinct requestId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where EventName == \"github.copilot-chat/panel.edit.feedback\"\n| project outcome = tostring(Properties.outcome), requestId = tostring(Properties.requestid), hasRemainingEdits=tobool(Properties.hasremainingedits), DevDeviceId\n) on requestId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| distinct requestId, outcome, hasRemainingEdits\n| extend outcome=iif(isempty(outcome), 'Implicit accepted', iif(hasRemainingEdits, 'partially accepted', outcome))\n| summarize count() by outcome"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula search",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula search",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of buildfix executions",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of buildfix executions",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize executions=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : success rate of buildfix executions",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize succeeded_ratio = todouble(countif(tostring(Properties.result) == \"SUCCEEDED\")) / count()\n"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : success rate for buildfix executions",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize succeeded_ratio = todouble(countif(tostring(Properties.result) == \"SUCCEEDED\")) / count() by bin(ClientTimestamp, 1d)\n"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of scenario migrated",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.run', 'java.migrateassistant.handleMigrate')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where migrateaction == 'migrate'\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of scenario migrated",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.run', 'java.migrateassistant.handleMigrate')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where migrateaction == 'migrate'\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize executions=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula appy",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/apply\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula apply",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/apply\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula create",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/create\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula create",
    "query": "let _endOfYesterday = startofday(<_endTime>);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/create\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula import",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) == 'migrate.java.formula.importFromLocal'\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula import",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) == 'migrate.java.formula.importFromLocal'\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula delete",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.delete', 'migrate.java.formula.deleteall')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula delete",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where command in (\"migrate.java.formula.delete\", \"migrate.java.formula.deleteall\")\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula export",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.export', 'migrate.java.formula.exportall')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count()"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of formula export",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where command in (\"migrate.java.formula.export\", \"migrate.java.formula.exportAll\")\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Top 20 popular operations by users",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(ago(28d)) .. startofday(now())-1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend command = tostring(Properties.command) \n| where isnotempty(command)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize countByUser=dcount(DevDeviceId), arg_max(ClientTimestamp, ExtensionVersion) by command\n| sort by countByUser desc \n| limit 20"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Blade Open",
    "query": "database('VSCode').table('RawEventsVSCode') \n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) -1s)\n// | where EventName == \"monacoworkbench/activateplugin\"\n| where Properties.reasonid == 'vscjava.migrate-java-to-azure'\n| where Properties contains \"onView:azureJavaMigrationExplorer\"\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : # of Blade Open",
    "query": "database('VSCode').table('RawEventsVSCode') \n| where ClientTimestamp between (startofday(<_startTime>) .. startofday(<_endTime>) -1s)\n// | where EventName == \"monacoworkbench/activateplugin\"\n| where Properties.reasonid == 'vscjava.migrate-java-to-azure'\n| where Properties contains \"onView:azureJavaMigrationExplorer\"\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp, 1d)"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Assessment funnel",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(ago(28d)) .. startofday(now())-1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend command = tostring(Properties.command) \n| where command in ('migrate.java.assessment', 'migrate.java.assessment.solutionReport', 'migrate.java.assessment.summaryReport', 'migrate.java.openSolutionMigrateView')\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| extend command_alias = case(\n    command == 'migrate.java.assessment', 'Run Assessment',\n    command == 'migrate.java.assessment.solutionReport', 'Open Solution Report',\n    command == 'migrate.java.assessment.summaryReport', 'Open Summary Report',\n    command == 'migrate.java.openSolutionMigrateView', 'Open Solution Migration View',\n    command // fallback: keep original if unmatched\n)\n| summarize countByUser=dcount(VSCodeMachineId) by command_alias"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Runs of Sample Apps",
    "query": "//com.microsoft.migration:assets-manager-worker: 87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\n//com.microsoft.migration:assets-manager-web: 324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\n//org.airsonic.player:airsonic: b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\n//org.airsonic.player:subsonic-rest-api: 5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\n//org.airsonic.player:airsonic-sonos-api: 435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\n//org.airsonic.player:airsonic-main: 967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\n//org.airsonic.player:airsonic-docker: 8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\n//org.airsonic.player:airsonic-integration-test: 808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\n//com.microsoft.sqlserver:mssql-jdbc: 52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\n//com.example:messaging-rabbitmq: f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\n\nlet appIdGroupMap = datatable(AppId:string, Sample:string)\n[\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\", \"asset-manager\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\", \"asset-manager\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\", \"airsonic\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\", \"airsonic\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\", \"airsonic\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\", \"airsonic\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\", \"airsonic\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\", \"airsonic\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\", \"mi-sql-public-demo\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\", \"rabbitmq-sender\"\n];\n\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p[\"hashedappid\"])\n| where isnotempty(AppId)\n| join kind=inner appIdGroupMap on AppId\n| join kind=leftouter database(\"VsCodeInsights\").fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), \"Internal Users\", \"External Users\")\n| where iif(<user_source> == \"internal\", internal == \"Internal Users\", iif(<user_source> == \"total\", true, internal == \"External Users\"))\n| summarize Runs = dcount(DevDeviceId) by bin(ClientTimestamp, 1d), Sample\n| order by ClientTimestamp asc, Sample\n"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Runs of Samples",
    "query": "//com.microsoft.migration:assets-manager-worker: 87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\n//com.microsoft.migration:assets-manager-web: 324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\n//org.airsonic.player:airsonic: b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\n//org.airsonic.player:subsonic-rest-api: 5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\n//org.airsonic.player:airsonic-sonos-api: 435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\n//org.airsonic.player:airsonic-main: 967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\n//org.airsonic.player:airsonic-docker: 8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\n//org.airsonic.player:airsonic-integration-test: 808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\n//com.microsoft.sqlserver:mssql-jdbc: 52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\n//com.example:messaging-rabbitmq: f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\n\nlet appIdGroupMap = datatable(AppId:string, Sample:string)\n[\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\", \"com.microsoft.migration\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\", \"com.microsoft.migration\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\", \"org.airsonic.player\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\", \"org.airsonic.player\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\", \"org.airsonic.player\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\", \"org.airsonic.player\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\", \"org.airsonic.player\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\", \"org.airsonic.player\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\", \"com.microsoft.sqlserver\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\", \"com.example\"\n];\n\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p[\"hashedappid\"])\n| where isnotempty(AppId)\n| join kind=inner appIdGroupMap on AppId\n| join kind=leftouter database(\"VsCodeInsights\").fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), \"Internal Users\", \"External Users\")\n| where iif(<user_source> == \"internal\", internal == \"Internal Users\", iif(<user_source> == \"total\", true, internal == \"External Users\"))\n| summarize Runs = dcount(DevDeviceId)\n"
  },
  {
    "description": "GitHub Copilot App Modernization for Java : Top 20 Error messages",
    "query": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(<_startTime>) .. (startofday(<_endTime>) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend error=tostring(Properties.error), formula=tostring(Properties.formula), result=tostring(Properties.result), isMicrosoft=tobool(Properties.ismicrosoft)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(<user_source> == 'internal', internal == 'Internal Users', iif(<user_source> == 'total', true, internal == 'External Users'))\n| where isnotempty( error) and error !in (\"F\", \"TypeError\", \"Error\", \"ENOENT\", \"ERR_INVALID_ARG_TYPE\")//skip code bug\n| summarize count=count() by error\n| order by count desc\n| limit 20"
  },
  {
    "description": "One Page (WIP) : Products Used by Session",
    "query": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nallRuns\n| summarize count = dcount(tool) by session\n| extend label = strcat(iff(count == 1, 'Singel', iff(count == 2, 'Double', 'Triple')), '-product Sessions')\n| summarize Sessions = count() by label"
  },
  {
    "description": "One Page (WIP) : Product Used in Single-product Sessions",
    "query": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet sigleToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count == 1\n| distinct session\n| summarize sessionList = make_list(session);\nallRuns\n| where session in (sigleToolSessions)\n| summarize Sessions = count() by tool\n| project Product = tool, Sessions"
  },
  {
    "description": "One Page (WIP) : Starting/Terminal Product in Multi-product Sessions",
    "query": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet multipleToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count > 1\n| distinct session\n| summarize sessionList = make_list(session);\nlet multipleToolRuns = allRuns\n| where session in (multipleToolSessions);\nlet startingTools = multipleToolRuns\n| summarize arg_min(timestamp, tool) by session\n| project session, Starting = tool;\nlet terminalTools = multipleToolRuns\n| summarize arg_max(timestamp, tool) by session\n| project session, Terminal = tool;\nstartingTools\n| join kind=inner terminalTools on session\n| summarize ['Session Count'] = count() by Starting, Terminal"
  },
  {
    "description": "One Page (WIP) : Products Used in Double-product Sessions",
    "query": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet twoToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count == 2\n| distinct session\n| summarize sessionList = make_list(session);\nlet twoToolRuns = allRuns\n| where session in (twoToolSessions)\n| distinct session, tool;\ntwoToolRuns\n| sort by session, tool\n| summarize toolList = make_list(tool) by session\n| extend Tools = strcat_array(toolList, ' + ')\n| summarize Sessions = count() by Tools"
  },
  {
    "description": "One Page (WIP) : # of Language Tool Runs by Session",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet allRuns = languageToolRuns\n| sort by session, timestamp asc;\nallRuns\n| summarize val = count() by session\n| extend RunsBucket = case (\n    val > 100,\n    \"> 100\",\n    val > 50 and val <= 100 ,\n    \"51-100\",\n    val > 20 and val <= 50 ,\n    \"21-50\",\n    val > 10 and val <= 20 ,\n    \"11-20\",\n    val > 5 and val <= 10 ,\n    \"6-10\",\n    val > 2 and val <= 5,\n    \"3-5\",\n    val == 2,\n    \"2\",\n    \"1\"\n  )\n| summarize Sessions=count() by RunsBucket\n| order by Sessions desc\n| project ['Tool Runs'] = RunsBucket, Sessions"
  },
  {
    "description": "One Page (WIP) : Session Duration",
    "query": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet firstSessionRecord = allRuns\n| summarize arg_min(timestamp, timestamp, session) by session\n| project startTime = timestamp, session;\nlet lastSessionRecord = allRuns\n| summarize arg_max(timestamp, timestamp, session) by session\n| project endTime = timestamp, session;\nfirstSessionRecord\n| join kind=inner lastSessionRecord on session\n| extend val = datetime_diff('minute', endTime, startTime)\n| extend Duration = case (\n    val > 120,\n    \"> 2hr\",\n    val > 60 and val <= 120,\n    \"1-2 hr\",\n    val > 30 and val <= 60 ,\n    \"31-60 min\",\n    val > 10 and val <= 30 ,\n    \"11-30 min\",\n    val > 5 and val <= 10 ,\n    \"6-10 min\",\n    val >= 1 and val <= 5 ,\n    \"1-5 min\",\n    \"less than 1 min\"\n  )\n| summarize Sessions=count() by Duration\n| order by Sessions desc"
  },
  {
    "description": "One Page (WIP) : # of Starting/Terminal Language Tool by Session",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet multipleLanguageToolSessions = languageToolRuns\n| summarize count = dcount(languageTool) by session\n| where count > 1;\nlet multipleLanguageToolRuns = languageToolRuns\n| where session in (multipleLanguageToolSessions);\nlet startingToolCount = multipleLanguageToolRuns\n| summarize arg_min(timestamp, languageTool) by session\n| summarize startingCount = count() by languageTool\n| project languageTool, startingCount;\nlet terminalToolCount = multipleLanguageToolRuns\n| summarize arg_max(timestamp, languageTool) by session\n| summarize terminalCount = count() by languageTool\n| project languageTool, terminalCount;\nstartingToolCount\n| join kind=fullouter terminalToolCount on languageTool\n| extend languageTool = iff(isempty(languageTool), languageTool1, languageTool)\n| extend startingCount = iff(isempty(startingCount), 0, startingCount)\n| extend terminalCount = iff(isempty(terminalCount), 0, terminalCount)\n| extend totalCount = startingCount + terminalCount\n| order by totalCount\n| project ['Language Tool'] = languageTool, ['Starting Count'] = startingCount, ['Terminal Count'] = terminalCount"
  },
  {
    "description": "One Page (WIP) : # of Language Tool Runs by Tool Name",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlanguageToolRuns\n| summarize Count = count() by languageTool\n| order by Count\n| project ['Language Tool'] = languageTool, Count"
  },
  {
    "description": "One Page (WIP) : # of Language Tool Chain",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlanguageToolRuns\n| sort by session, timestamp asc\n| extend next_tool = next(languageTool), next_session = next(session)\n| where session == next_session and languageTool != next_tool\n| summarize Count = count() by languageTool, next_tool\n| sort by Count\n| project Tool = languageTool, ['Next Tool'] = next_tool, Count"
  },
  {
    "description": "One Page (WIP) : # of Terminal Language Tool Chain",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet terminalToolRuns = languageToolRuns\n| summarize arg_max(timestamp, languageTool) by session;\nlet toolChain = languageToolRuns\n| sort by session, timestamp asc\n| extend prev_tool = prev(languageTool), prev_session = prev(session)\n| where session == prev_session and languageTool != prev_tool;\ntoolChain\n| join kind=inner terminalToolRuns on timestamp, session\n| summarize Count = count() by prev_tool, languageTool\n| sort by Count\n| project Tool = prev_tool, ['Next Tool'] = languageTool, Count"
  },
  {
    "description": "One Page (WIP) : # of Terminal Language Tool with Multiple Attempts",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet terminalToolRuns = languageToolRuns\n| summarize arg_max(timestamp, languageTool) by session;\nlet toolChain = languageToolRuns\n| sort by session, timestamp asc\n| serialize row_id=row_number()\n| extend prev_tool = prev(languageTool), prev_session = prev(session)\n| where session == prev_session and languageTool == prev_tool;\ntoolChain\n| join kind=inner terminalToolRuns on timestamp, session\n| summarize Count = count() by prev_tool, languageTool\n| order by Count\n| project Tool = languageTool, Count"
  },
  {
    "description": "One Page (WIP) : # of Language Tool in Single-language-tool-run Session",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet singleLanguageToolSessions = languageToolRuns\n| summarize count = dcount(languageTool) by session\n| where count == 1;\nlanguageToolRuns\n| where session in (singleLanguageToolSessions)\n| summarize Count = count() by languageTool\n| order by Count\n| project Tool = languageTool, Count"
  },
  {
    "description": "One Page (WIP) : # of Terminal Language Tool in Session with Errors",
    "query": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet javaUpgradeErrorSessions = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == \"vscjava.vscode-java-upgrade\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend error = tostring(Properties.errormessage)\n| where isnotempty(error)\n| distinct VSCodeSessionId;\nlet codeRemediationErrorSessions = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| extend error = tostring(Properties.error)\n| where isnotempty(error) and error !in (\"F\", \"TypeError\", \"Error\", \"ENOENT\", \"ERR_INVALID_ARG_TYPE\")\n| distinct VSCodeSessionId;\nlet errorSessions = union javaUpgradeErrorSessions, codeRemediationErrorSessions\n| distinct session = VSCodeSessionId;\nlet errorRuns = languageToolRuns\n| where session in (errorSessions);\nerrorRuns\n| summarize arg_max(timestamp, languageTool) by session\n| summarize terminalCount = count() by languageTool\n| order by terminalCount\n| project ['Language Tool'] = languageTool, ['Terminal Count'] = terminalCount"
  },
  {
    "description": "One Page (WIP) : Assessment Funnel by Operation",
    "query": "let assessButtonClicks = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| where EventName has 'java/migrateassistant/command'\n| extend command=tostring(Properties.command)\n| where command == 'migrate.java.assessment'\n| summarize count = count()\n| extend stage = \"Assess Button Click\"\n| extend id = 1\n| project id, stage, count;\nlet languageToolRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| where Properties has \"assessApplication\" or Properties has \"modernization_assessor\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| summarize count = count()\n| extend stage = \"Assessor Language Tool Triggered\"\n| extend id = 2\n| project id, stage, count;\nlet appcatRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Name == \"java/appcat/command\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend message = parse_json(message)\n| extend command = tostring(message.message)\n| where command == \"analyze\"\n| extend customDimensions = parse_json(customDimensions)\n| extend status = tostring(customDimensions.status)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\";\nlet appcatRunsCount = appcatRuns\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT CLI Triggered\"\n| extend id = 3\n| project id, stage, count;\nlet appcatRunsSuccess = appcatRuns\n| where status == \"end\"\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT CLI Run Success\"\n| extend id = 4\n| project id, stage, count;\nlet appcatReportRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Name == \"java/appcat/report\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend customDimensions = parse_json(customDimensions)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT Report Gernerated\"\n| extend id = 5\n| project id, stage, count;\nunion assessButtonClicks, languageToolRuns, appcatRunsCount, appcatRunsSuccess, appcatReportRuns\n| order by id asc"
  },
  {
    "description": "One Page (WIP) : Assessment Funnel by User",
    "query": "let assessButtonClicks = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| where EventName has 'java/migrateassistant/command'\n| extend command=tostring(Properties.command)\n| where command == 'migrate.java.assessment'\n| summarize count = dcount(DevDeviceId)\n| extend stage = \"Assess Button Click\"\n| extend id = 1\n| project id, stage, count;\nlet languageToolRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (<_startTime> .. <_endTime>)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where <user_source> == 'total' or <user_source> == 'internal' and IsInternal or <user_source> == 'external' and not(IsInternal)\n| where Properties has \"assessApplication\" or Properties has \"modernization_assessor\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| summarize count = dcount(DevDeviceId)\n| extend stage = \"Assessor Language Tool Triggered\"\n| extend id = 2\n| project id, stage, count;\nlet appcatRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Name == \"java/appcat/command\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend message = parse_json(message)\n| extend command = tostring(message.message)\n| where command == \"analyze\"\n| extend customDimensions = parse_json(customDimensions)\n| extend status = tostring(customDimensions.status)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| extend machineId = tostring(customDimensions.machineid);\nlet appcatRunsCount = appcatRuns\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT CLI Triggered\"\n| extend id = 3\n| project id, stage, count;\nlet appcatRunsSuccess = appcatRuns\n| where status == \"end\"\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT CLI Run Success\"\n| extend id = 4\n| project id, stage, count;\nlet appcatReportRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (<_startTime> .. <_endTime>)\n| where operation_Name == \"java/appcat/report\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where <user_source> == 'total' or <user_source> == 'internal' and internal or <user_source> == 'external' and not(internal)\n| extend customDimensions = parse_json(customDimensions)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| extend machineId = tostring(customDimensions.machineid)\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT Report Gernerated\"\n| extend id = 5\n| project id, stage, count;\nunion assessButtonClicks, languageToolRuns, appcatRunsCount, appcatRunsSuccess, appcatReportRuns\n| order by id asc"
  }
]
