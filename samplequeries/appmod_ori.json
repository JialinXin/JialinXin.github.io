{
    "$schema": "https://dataexplorer.azure.com/static/d/schema/60/dashboard.json",
    "id": "d0ebe8f0-53d9-4c4a-b715-25f181c3585d",
    "eTag": "c8b79eb7-3101-47ee-9774-b80e7068a692",
    "title": "App Modernization",
    "schema_version": "60",
    "pagesNavWidth": 311.89453125,
    "tiles": [
        {
            "id": "d42bc26c-af1d-46d9-b7af-e54509caab32",
            "title": "# of DAU",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 3,
                "y": 6,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "aeff17d2-c3e8-4359-9858-ba1d7599fc3d"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "52aeedcb-6052-4bb2-ad44-81b71475d65e",
            "title": "# of Apps",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 3,
                "y": 18,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "aff73f70-089b-46ec-890f-4f503fcd238e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "fefede34-a119-4d71-a10e-3284f8ac1dd8",
            "title": "# of Lines Addressed (last 28 days)",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 18,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "90db50c7-716f-4063-bb47-2e71f394dda7"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "6dcb1116-d457-4c58-a695-6ed41ed60c1d",
            "title": "# of Issues Found",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 12,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ca8901fb-d02a-4d77-9b2f-4e2ee64c4a9f"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5a17e7e0-dddc-48fa-b600-ab220c911838",
            "title": "# of MEU",
            "description": "Monthly users that use AppCAT to analyze projects at less twice.",
            "visualType": "multistat",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 12,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "fdb4488c-c70d-4e12-92cb-5480f4c355d1"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "multiStat__displayOrientation": "horizontal",
                "multiStat__labelColumn": "internal",
                "multiStat__slot": {
                    "width": 1,
                    "height": 2
                },
                "colorRules": []
            }
        },
        {
            "id": "39d1db54-15a9-4126-b54d-a9ca1472e8ed",
            "title": "# of MAU",
            "visualType": "multistat",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 6,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d04a4584-cf2a-499b-9edf-371fe3378c84"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "multiStat__displayOrientation": "horizontal",
                "multiStat__labelColumn": null,
                "multiStat__slot": {
                    "width": 1,
                    "height": 2
                },
                "colorRules": []
            }
        },
        {
            "id": "8d691756-2bf6-4fa1-8e94-9e66c3377499",
            "title": "# of Apps",
            "visualType": "multistat",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 18,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3e5a0532-b743-4c27-bc78-a6cf6a67278f"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "multiStat__displayOrientation": "horizontal",
                "multiStat__labelColumn": null,
                "multiStat__slot": {
                    "width": 1,
                    "height": 2
                },
                "colorRules": []
            }
        },
        {
            "id": "53b7ec77-42c4-43fb-b02c-f25260307536",
            "title": "# of Issues Found",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 12,
                "y": 12,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "eeb34139-5d30-44cd-9e61-87102b9ad4b9"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "da8fc589-a502-44be-abf3-3ddd324f2cff",
            "title": "# of DEU",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 3,
                "y": 12,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "68a5934f-c1e3-4aaa-a749-e374db7e3fff"
            },
            "description": "Daily users that executes AppCAT to analyze projects at least twice within the day.",
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "7a2fd3d5-0585-4eaf-af69-cf0d56f683a9",
            "title": "# of Lines Addressed",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 12,
                "y": 18,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9fdd6a65-bd12-4d56-9549-513a8202bbf9"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "7902847a-8523-48d5-b081-11cb49347284",
            "title": "Top 10 Issue Categories",
            "visualType": "table",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 24,
                "width": 9,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "bdbcf45e-c362-40a6-8c75-48dea22b328d"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "f862c322-061a-4196-8c7f-4e44cd1b63c9",
            "title": "Success Runs",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 3,
                "width": 6,
                "height": 3
            },
            "queryRef": {
                "kind": "query",
                "queryId": "416c8330-176e-4f3f-a424-5791bf8d8ef8"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "d7ec5b58-888c-4b22-b136-d3430558f502",
            "title": "Description",
            "visualType": "markdownCard",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 3
            },
            "markdownText": "# AppCAT for Java usage reports for last 28 days",
            "visualOptions": {}
        },
        {
            "id": "015d7c64-26f3-41b6-8b73-c17e58ea053e",
            "title": "Success Runs (Unique Machines)",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 6,
                "y": 3,
                "width": 6,
                "height": 3
            },
            "queryRef": {
                "kind": "query",
                "queryId": "0e433442-880d-4907-9297-2c8bffd580ed"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "76e475e7-9528-418d-ae87-61155091eed9",
            "title": "# of Runs (CLI)",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 0,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9ebe5171-5032-46d7-ad04-9c964dae46b9"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "566087de-1611-43b4-acd3-0da24187ed0a",
            "title": "# of Runs (VS Code Ext)",
            "visualType": "line",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 6,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "a591c785-80bc-4fa1-9ddc-26f7321202fe"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "a1186e1c-ad7e-4815-9a16-e405fbb2b7af",
            "title": "# of Runs (CLI)",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 12,
                "y": 0,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "84860695-d4da-4cc6-8cd6-f69d345a0992"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "15b08537-b6d6-4969-befc-766a86d68538",
            "title": "# of Runs (VS Code Ext)",
            "visualType": "card",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 12,
                "y": 6,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9bef559d-1c29-4ed2-a5b7-c9940a8a55c8"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "2a48c4e8-1cd9-4913-b121-7bb8bc5b143d",
            "title": "Analyze Targets",
            "visualType": "pie",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 6,
                "y": 24,
                "width": 9,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "112c0b8d-7a9a-4367-969d-3ab3aec44699"
            },
            "visualOptions": {
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "f028d094-9bb1-4f29-a945-cef62cf7cd58",
            "title": "Duration of Runs",
            "visualType": "bar",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 6,
                "y": 32,
                "width": 9,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "0479566d-c63a-45df-bfbc-f82e3006fba0"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "64e7df5c-d53f-4100-ba5d-6e57726895c5",
            "title": "# of Runs (Successes vs. Failures)",
            "visualType": "pie",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 24,
                "width": 6,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9ea5b2fe-fae8-4de9-b1a5-afbd9523e4a0"
            },
            "visualOptions": {
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "9e75458e-29ad-4471-94f9-597a608b2d3a",
            "title": "# of Runs with Custom Rules",
            "visualType": "pie",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 32,
                "width": 6,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "228170e6-dd69-4c43-aa61-2737ac64f843"
            },
            "visualOptions": {
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "d4d113fd-b1da-46e9-9ad8-daa6d52f43c0",
            "title": "# of Runs per App",
            "visualType": "bar",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 15,
                "y": 32,
                "width": 9,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8f63c460-e2eb-47ce-a018-bbf2a538ff3d"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "d0b1bf27-01e5-458c-bb00-d630f74f4ae8",
            "title": "# of Issues per Run (CLI)",
            "visualType": "bar",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 0,
                "y": 40,
                "width": 9,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4a23c414-cbe4-4028-ad1c-cb69861633cb"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "1aa88365-8a4d-439c-bce8-991453d44aeb",
            "title": "# of Issue per Run (VS Code Ext)",
            "visualType": "bar",
            "pageId": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74",
            "layout": {
                "x": 9,
                "y": 40,
                "width": 9,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "451b5851-52b2-4344-a043-e0f02e8dec9c"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "e8c7950b-9310-4462-b11b-261e04088873",
            "title": "Description",
            "visualType": "markdownCard",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 3
            },
            "markdownText": "# GitHub Copilot App Modernization for Java (Data available from 2025-05-20, as of yesterday)",
            "visualOptions": {}
        },
        {
            "id": "3098b6af-9283-4791-9682-90f187f20a3e",
            "title": "# of LLM Calls",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 3,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "91eb095b-55d7-461e-ac7a-b494c21ce5d0"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "c5294a9e-e428-49af-abad-f8d2f00b9601",
            "title": "# of LLM Calls",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 3,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4cd2ce5d-8130-4958-9587-9f0e777a00ef"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "04e2c525-ccf4-4f7f-bd52-b7e4627b0163",
            "title": "# of Installations",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 3,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "991d81bb-2234-477d-acdb-9c14060659af"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "fc4db5a0-bd54-43ba-a5b4-152e8012eb04",
            "title": "# of Installations",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 3,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "f97ab23b-c45a-4281-9f6c-c66a1d959e2e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "a9251824-e53d-46c8-bd5d-9386c756a5b3",
            "title": "Migration Avg Tokens",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 9,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "61068345-ec19-4576-96f5-5c198edae9f0"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "3702d84a-9c92-4252-be97-0860425d38f5",
            "title": "Migration Avg Tokens",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 9,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3ef5076e-c760-4276-831e-5403bf935036"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "6e1b6452-d9eb-48ac-a0b1-3526623ea1ca",
            "title": "# of MEU",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 21,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8c34b00c-535c-4179-8d14-008f3917e062"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "57ba7fa3-6cf8-4f31-9e4c-82fc96f4fe3e",
            "title": "# of DEU",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 21,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "da183304-0540-48ce-bf87-89dc3a4bc0ec"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "be1d798c-2ec2-4fa4-976f-558009bf7d5c",
            "title": "# of Apps",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 27,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "45f4abc6-7493-4e2e-94f5-bcb1b52f6bde"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "52affc97-a38e-4f2b-8bdb-9fed3732c796",
            "title": "# of Apps",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 27,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "26fc5726-10e9-40a1-b1a4-521103f30a25"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "2c08bd91-4a4e-44c3-a915-13e971663f0d",
            "title": "# of MAU",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 15,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5dcdafe9-fc04-42e9-b837-0b84b174df85"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "7627c844-d2a0-4d3a-a32a-1faa5acbbb89",
            "title": "# of DAU",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 15,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "f5fa177d-1c5e-4196-b1a2-22abccdacb0e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "4d13cf40-ec91-478a-9feb-43ef498be3fd",
            "title": "# of code lines proposed",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 21,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3dc21f26-7d7f-4eb3-ad2f-87259cbe545a"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "6ed77640-18af-4fc3-a20e-d39855c6827c",
            "title": "# of code lines proposed",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 21,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "2174c57a-9ae4-4a01-962b-5e319126cadd"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5cb64c8d-467b-4cd9-9078-4ee6bf316f2c",
            "title": "Top 20 formulas applied",
            "visualType": "table",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 45,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "be267ed5-c718-4335-a232-e621813a3350"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "59d8bafc-8c6f-4f00-b9d6-465f709c9587",
            "title": "% of retained edits when applying formulas",
            "visualType": "pie",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 39,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1c2af807-27b9-4d84-ae29-4279b2b3b53d"
            },
            "visualOptions": {
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "9172df75-450a-438e-9dc3-1033d8c52d1c",
            "title": "# of formula search",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 55,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8e804076-aea8-4100-a1bc-f3de1b4b545b"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "84b9096c-3960-4314-a774-7f07bc99577d",
            "title": "# of formula search",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 55,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b1acaf7e-889d-4f0d-aa39-0f9c4f054b1f"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "c3544511-0206-4654-acb0-c6b8f518568d",
            "title": "# of buildfix executions",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 27,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1b9af42a-498d-4ee3-96f2-ed902f76bee9"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "fdb3295a-7bf8-4f30-b8c6-b0eb93e9fcc5",
            "title": "# of buildfix executions",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 27,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "136d13e6-cd02-4091-ad13-115e65a7fc49"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "ed11fd88-9b4a-490c-97d2-940f9655a54e",
            "title": "success rate of buildfix executions",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 33,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "dd987022-0096-4a21-8bec-67732ec56326"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "c9ebddbd-e0d6-4492-8b4c-b829f75bd7c5",
            "title": "success rate for buildfix executions",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 33,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "6227b4ed-b2f4-4784-b645-c24913fb85a8"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "505a0e33-15a9-4725-8ce7-136a1a2faf37",
            "title": "# of scenario migrated",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 15,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d0a0eeb8-52bd-44c6-8f0b-fe932b0b9352"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "33ba2fde-47ba-4a59-84c9-42b7e273f867",
            "title": "# of scenario migrated",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 15,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "96a3aa70-ea58-4f39-9315-1787fb36ca78"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "479ceadc-9a92-4214-bf04-20fcaa64d45a",
            "title": "Description",
            "visualType": "markdownCard",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 53,
                "width": 24,
                "height": 2
            },
            "markdownText": "## Formula operations",
            "visualOptions": {}
        },
        {
            "id": "bc96bbb4-191f-4564-b1e4-193a787310e1",
            "title": "# of formula appy",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 55,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "cdf2bfd9-af25-4222-b498-d351a4bc43e0"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "67a402dc-2236-4d61-9f57-0ebf636c3715",
            "title": "# of formula apply",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 55,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1b52da26-4f10-456d-9551-9d148eb0c34e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "f5863c91-4b6a-42e2-a06f-b6c0b214459a",
            "title": "# of formula create",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 61,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "303234b9-61b7-45a7-9922-e5504070eabc"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "0d8526f0-bd1d-4b20-b910-01950514d9ca",
            "title": "# of formula create",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 61,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9995f925-0374-4f66-ae09-34e306aeb849"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "ae9a6ab4-e0d9-4102-a127-77346320ee64",
            "title": "# of formula import",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 61,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "79efc414-0a86-4047-bf86-076b22808c68"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "8fbee563-fdea-4284-81b2-596b03f99e4f",
            "title": "# of formula import",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 61,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "450c8d99-f041-4749-97d7-8ee724d70026"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "6887a08c-b3ca-447f-90f3-a63f5eb6d3ea",
            "title": "# of formula delete",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 67,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5127368d-3ef6-478d-b1df-6c7955cd3f49"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "749c5f9f-4b76-434b-bb65-871e0de3c78e",
            "title": "# of formula delete",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 67,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d649b24d-f673-40d8-9b57-c0e945f32d82"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "e0c08791-19aa-42ed-a329-38fecd7ee186",
            "title": "# of formula export",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 67,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "f7e4fefe-6e53-48e4-8cbf-c91d57ed28b1"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "eaa89438-af45-4b3a-bf55-a1da16cb5922",
            "title": "# of formula export",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 15,
                "y": 67,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e4db2094-52a4-4980-bd6d-717c8d6f998e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "df315165-74e4-48ec-9db7-f73dfefbf6e3",
            "title": "Top 20 popular operations by users",
            "visualType": "table",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 45,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "6efe0afc-e321-4390-a5a0-cccc9ea99c1e"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "19af812f-a182-4176-ab44-4a5547ded7ab",
            "title": "# of Blade Open",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 9,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "aff3a8be-688f-4c74-8de1-339a37ba68b5"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "b24cc6a2-f379-4c7f-8de4-5be9a16af6ac",
            "title": "# of Blade Open",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 9,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3a92d8bf-9dd9-4ed2-9b74-297a3f0c45f7"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "68ec4267-921e-4fca-a8e8-942402666d62",
            "title": "Assessment funnel",
            "visualType": "funnel",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 12,
                "y": 39,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1f70dc0c-4146-4871-9285-da7019e7cc89"
            },
            "visualOptions": {
                "xColumn": null,
                "yColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "f7ff7e72-f1bc-4415-b5a4-ca456d0fa28c",
            "title": "Runs of Sample Apps",
            "visualType": "line",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 3,
                "y": 33,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "80cbc603-1346-4d35-96cd-ca10044915f7"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "e3f4aab4-981a-4380-a01e-563b0329524d",
            "title": "Runs of Samples",
            "visualType": "card",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 33,
                "width": 3,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "800ff8fe-81ad-4cf0-bc3e-0189a29d3e43"
            },
            "visualOptions": {
                "multiStat__textSize": "auto",
                "multiStat__valueColumn": null,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "colorRules": []
            }
        },
        {
            "id": "adbd76df-2c6e-4fe6-954b-e2e692316bf4",
            "title": "Top 20 Error messages",
            "visualType": "table",
            "pageId": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "layout": {
                "x": 0,
                "y": 73,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "efc19d84-89f2-4dbd-8a84-8aeff23bbe72"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "70671da9-a8f2-49e7-9aac-e617615da427",
            "title": "New tile",
            "visualType": "markdownCard",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 5
            },
            "markdownText": "# VS Code Extension Copilot Language Tools Experince\r\n\r\nAll the data presented in the following section is specifically focused on language tool invocation events within **Copilot Chat**. Events unrelated to Copilot Chat are excluded from this analysis. For example, if a user executes a command from another product that does not involve a language tool, that event is not counted here.\r\n\r\nTherefore, when we say that a user only used one product during a session in the views below, it does **not** mean the user didn’t interact with or install other products. It simply means that, in that particular session, only one product’s language tool was invoked.",
            "visualOptions": {}
        },
        {
            "id": "1a3385ef-c811-43f0-ad38-b0bb9d05eec0",
            "title": "Products Used by Session",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 11,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d22d6ca3-a477-4716-afda-3d21b4f3581e"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "01cd3730-5af2-4226-9bd1-010ddf73d709",
            "title": "Product Used in Single-product Sessions",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 11,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "66a398b9-a4ae-4acd-8b82-5738140c1184"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "c2d79f35-b5e5-4b40-9c4e-eb1216893549",
            "title": "Starting/Terminal Product in Multi-product Sessions",
            "visualType": "heatmap",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 17,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "f4a838ab-c7a4-49b6-885d-6f69a34167f3"
            },
            "visualOptions": {
                "xColumn": null,
                "xColumnTitle": "Starting Product",
                "yColumnTitle": "Terminal Product",
                "heatMap__dataColumn": null,
                "heatMap__colorPaletteKey": "blue",
                "yColumns": null
            }
        },
        {
            "id": "8ecdbc06-716b-45fb-9cf7-7e405f030ac4",
            "title": "Products Used in Double-product Sessions",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 17,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "66d0c63a-4418-4695-a027-49f9339a9158"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "2738fe81-e131-4bf2-a926-63718579e970",
            "title": "# of Language Tool Runs by Session",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 30,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3020d630-6ebe-4b9f-9c93-bf32db290cf2"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "Tool runs",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "faf912c6-ea17-4f12-a4f1-6305d75fb537",
            "title": "Session Duration",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 30,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "6d9da8e3-2770-48f5-b87a-4aee1239e3a2"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "e8fe9049-709e-4008-9ec7-70db2e890ceb",
            "title": "# of Starting/Terminal Language Tool by Session",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 36,
                "width": 12,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e98251ee-ba40-4637-bcb1-424b703b5dfa"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "a16054b8-7a3a-49ed-bc17-9affa3310423",
            "title": "# of Language Tool Runs by Tool Name",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 36,
                "width": 12,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ca130db3-460b-4a18-ba52-cc689c5c8d00"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "1e4f44b3-e3d6-403e-9f0d-dee18b91e4ef",
            "title": "# of Language Tool Chain",
            "visualType": "heatmap",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 73,
                "width": 24,
                "height": 16
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4805376b-38f2-4b77-b458-648fe2327e1c"
            },
            "visualOptions": {
                "xColumn": null,
                "xColumnTitle": "Previous Language Tool",
                "yColumnTitle": "Language Tool",
                "heatMap__dataColumn": null,
                "heatMap__colorPaletteKey": "blue",
                "yColumns": null
            }
        },
        {
            "id": "f674eb63-10e6-484c-8a94-2ccbbd883557",
            "title": "# of Terminal Language Tool Chain",
            "visualType": "heatmap",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 89,
                "width": 24,
                "height": 14
            },
            "queryRef": {
                "kind": "query",
                "queryId": "aeac8eb1-3e08-4784-bbf7-a42409a87933"
            },
            "visualOptions": {
                "xColumn": null,
                "xColumnTitle": "Previous Language Tool",
                "yColumnTitle": "Language Tool",
                "heatMap__dataColumn": null,
                "heatMap__colorPaletteKey": "blue",
                "yColumns": null
            }
        },
        {
            "id": "55853d11-35a5-4196-bc21-6b719e560a0a",
            "title": "# of Terminal Language Tool with Multiple Attempts",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 48,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ab70be44-f615-44f5-b40d-1973d909e645"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "3e96ac70-790d-46d5-bb8c-15bd0caf3dfd",
            "title": "# of Language Tool in Single-language-tool-run Session",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 48,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d8b3868f-44d0-414c-bee7-fec1711a9951"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "d8d0b748-5993-4055-9aad-18d75ead0e8b",
            "title": "New tile",
            "visualType": "markdownCard",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 5,
                "width": 24,
                "height": 6
            },
            "markdownText": "## Product Cohesion\n\nAs an integrated system, we aim for as many users as possible to use **AppCAT**, **Code Remediation**, and **Java Upgrade** together. If most users are not using all the products—or are only using one—we should consider whether the unified installation experience and the functional alignment across the suite need optimization.\n\nIn the **Starting/Terminal Product** view, we can analyze whether user behavior aligns with our expectations by looking at which product is launched first and which one is used last in each session. If the data doesn’t match our expectations, it could indicate that certain products are encountering friction points that prevent users from continuing, leading to a higher rate of those products being the terminal point. Alternatively, it might suggest that some product entry points are not prominent enough, making it difficult for users to begin their workflow there.\n\nIn the **Product Used in Single-product Sessions** view, users who only used **Code Remediation** likely encountered issues during the installation of **AppCAT**. On the other hand, users who only used **AppCAT** may have triggered the AppCAT CLI through means other than the Copilot Chat interface—for example, by executing a VS Code command that invokes the AppCAT CLI.",
            "visualOptions": {}
        },
        {
            "id": "78d89138-2dd7-4f3c-b82e-2f7c7968acc1",
            "title": "New tile",
            "visualType": "markdownCard",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 23,
                "width": 24,
                "height": 7
            },
            "markdownText": "## Language Tool Overview\n\nWe consider a single VS Code session as one user operation. Ideally, we want users to smoothly invoke multiple language tools within a single session to support their work. If, in most cases, users only run a few—or even just one—language tool per session, we need to further investigate why they are not leveraging more tools. Is it because they encounter difficulties when using certain tools, or is it that a small number of tool invocations are usually sufficient to meet their needs?\n\nThe duration of each session can partially reflect the completeness of a user’s operation. Very short sessions may indicate that users encountered unresolved issues and abandoned their tasks midway.\n\nIn the **Starting/Terminal Language Tool** view, we can analyze whether user behavior aligns with our expectations by examining which language tool is triggered first and which one is triggered last in each session. If the data doesn’t meet our expectations, it may suggest that certain tools are causing friction during use, leading to a higher frequency of those tools being the terminal point. Alternatively, it could mean that some tools have entry points that are not prominent enough, making it difficult for users to begin their workflow with them.\n\nThe **# of Terminal Language Tool with Multiple Attempts** view highlights language tools that users attempted to execute multiple times before ending their session. If these tools are not expected to be used repeatedly before task completion, it may indicate that users encountered difficulties while using them. Despite multiple attempts, they were unable to proceed with their workflow successfully, which ultimately led to the session ending with that tool.\n\nThe **# of Terminal Language Tool in Session with Errors** view shows the last language tool triggered in user sessions where an error occurred. A high count for a particular tool does not necessarily indicate a quality issue with that tool, as we do not distinguish between user errors and system errors in this data. Likewise, a low count does **not automatically** imply higher quality. It’s possible that some tools are not properly logging errors to the server, which could lead to underreporting. Therefore, both high and low counts should be interpreted with caution and in context.\n\n",
            "visualOptions": {}
        },
        {
            "id": "9289f92e-6902-44c4-bdfb-b81c1875b202",
            "title": "New tile",
            "visualType": "markdownCard",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 66,
                "width": 24,
                "height": 7
            },
            "markdownText": "## Collaboration Across Language Tools\n\nOur goal is to always assist or guide users to invoke the most appropriate language tool at the right time to help them complete their tasks. The **Language Tool Chain view** illustrates the sequences in which different language tools are triggered. For example, a chain like **createMigrationPlan → migrateCode** is a clear pattern—after generating a migration plan, the system invokes the **migrateCode** tool to help users begin code migration.\n\nThese chains may be implemented programmatically (e.g., automatically sending prompts to Copilot after certain commands), or they may be the result of thoughtful UX design—such as displaying a prominent button after a response to guide users toward the next tool.\n\nIf the tool chains are overly concentrated around a few patterns, we should consider how to improve the experience for the less frequent chains to encourage broader usage in practice.\n\nThe **# of Language Tool Chain** view can also provide insights into funnel performance. For example, by combining the data from the chains **createMigrationPlan → migrateCode** and **migrateCode → createMigrationSummary**, we can infer the funnel for the full sequence: **createMigrationPlan → migrateCode → createMigrationSummary**. Chains that belong to the same workflow sequence typically appear along the diagonal in the view, helping us visually identify and analyze complete tool usage paths.\n\nThe **Terminal Language Tool Chain** view shows the final chain triggered before users end their session. If this view is also overly concentrated, it may indicate that certain chains are blocking further progress. In such cases, we should reflect on what follow-up actions were expected after those chains—and why users didn’t proceed as intended. Of course, it’s also possible that some chains are designed to be natural endpoints.",
            "visualOptions": {}
        },
        {
            "id": "c6956805-0e43-443e-aec7-a9fe287c208c",
            "title": "# of Terminal Language Tool in Session with Errors",
            "visualType": "bar",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 57,
                "width": 24,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "57fc44ff-21ae-496a-967e-54f9635c6183"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "legendLocation": "bottom",
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "3e270ac4-c757-4ac7-9b49-d9b6fb11f241",
            "title": "Assessment Funnel by Operation",
            "visualType": "funnel",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 106,
                "width": 12,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "75c449c8-e776-431c-ac8a-6e5872d41800"
            },
            "visualOptions": {
                "xColumn": "stage",
                "yColumns": [
                    "count"
                ],
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "4cb36446-b029-41d0-a9e8-cce576aae6af",
            "title": "Assessment Funnel by User",
            "visualType": "funnel",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 12,
                "y": 106,
                "width": 12,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ad8d7e7b-bf15-4c17-a1c1-6ace3fe56a54"
            },
            "visualOptions": {
                "xColumn": "stage",
                "yColumns": [
                    "count"
                ],
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "1c5ce62a-f2a7-4b9e-8722-4d09ade16254",
            "title": "New tile",
            "visualType": "markdownCard",
            "pageId": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310",
            "layout": {
                "x": 0,
                "y": 103,
                "width": 24,
                "height": 3
            },
            "markdownText": "# Assessment Experience",
            "visualOptions": {}
        }
    ],
    "baseQueries": [],
    "parameters": [
        {
            "kind": "duration",
            "id": "e529d491-69d2-4e5b-9e37-a4805949e953",
            "displayName": "Time range",
            "description": "",
            "beginVariableName": "_startTime",
            "endVariableName": "_endTime",
            "defaultValue": {
                "kind": "dynamic",
                "count": 30,
                "unit": "days"
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "id": "2e6c30d1-947b-4598-a85c-745bf157c79b",
            "displayName": "User Source",
            "description": "internal/external/total",
            "variableName": "user_source",
            "selectionType": "scalar",
            "includeAllOption": false,
            "defaultValue": {
                "kind": "value",
                "value": "total"
            },
            "dataSource": {
                "kind": "static",
                "values": [
                    {
                        "value": "internal"
                    },
                    {
                        "value": "external"
                    },
                    {
                        "value": "total"
                    }
                ]
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
                    "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310"
                ]
            }
        }
    ],
    "dataSources": [
        {
            "id": "a554a883-4555-4985-be7a-2b5dfaaf0923",
            "kind": "manual-kusto",
            "scopeId": "kusto",
            "name": "VSCodeInsights",
            "clusterUri": "https://ddtelvscode.kusto.windows.net/",
            "database": "VSCodeInsights"
        },
        {
            "id": "326ac282-9931-4458-af0b-a4458e8edd96",
            "kind": "manual-kusto",
            "scopeId": "kusto",
            "name": "VsCodeExt",
            "clusterUri": "https://ddtelvscode.kusto.windows.net/",
            "database": "VSCodeExt"
        },
        {
            "id": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc",
            "kind": "manual-kusto",
            "scopeId": "kusto",
            "name": "ddtelai",
            "clusterUri": "https://ddtelai.kusto.windows.net/",
            "database": "Copilot"
        }
    ],
    "pages": [
        {
            "name": "AppCAT for Java",
            "id": "5f5b8cf9-d9e1-4f59-806b-15b750f99a74"
        },
        {
            "id": "843d2f11-2499-4f52-ac78-7f6f0fa1cc78",
            "name": "GitHub Copilot App Modernization for Java"
        },
        {
            "name": "One Page (WIP)",
            "id": "6bdf87aa-40f7-44c7-b0fd-6e757ab7b310"
        }
    ],
    "queries": [
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal = tobool(data.internal);\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalUsers = iff(isempty(count), 0, count)\n| extend ExternalTotalUsers = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Users'] = InternalTotalUsers, ['External Total Users'] = ExternalTotalUsers\n| render list",
            "id": "aeff17d2-c3e8-4359-9858-ba1d7599fc3d",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let processedTable = RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| extend data = parse_json(message)\n| extend internal = tobool(data.internal)\n| where not(isempty(pid));\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(pid) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(pid) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalApps = iff(isempty(count), 0, count)\n| extend ExternalTotalApps = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Apps'] = InternalTotalApps, ['External Total Apps'] = ExternalTotalApps\n| render list",
            "id": "aff73f70-089b-46ec-890f-4f503fcd238e",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| extend count = toint(dimensions.report_issues)\n| summarize ['Total Lines'] = sum(count) by bin(timestamp, 1d)\n| render list",
            "id": "90db50c7-716f-4063-bb47-2e71f394dda7",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize ['Total Issues'] = count() by bin(timestamp, 1d)",
            "id": "ca8901fb-d02a-4d77-9b2f-4e2ee64c4a9f",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter vscodeMachineIdMap on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal  = iff(tobool(data.internal), 'Internal Users', 'External Users');\nprocessedTable\n| where not(isempty(machineId))\n| summarize operation = dcount(operation_Id) by machineId, internal\n| where operation >= 2\n| summarize multiDayUsers = dcount(machineId) by internal\n| render list",
            "id": "fdb4488c-c70d-4e12-92cb-5480f4c355d1",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal = iff(tobool(data.internal), 'Internal Users', 'External Users');\nprocessedTable\n| summarize count = dcount(machineId) by internal\n| render list",
            "id": "d04a4584-cf2a-499b-9edf-371fe3378c84",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| where not(isempty(pid))\n| extend data = parse_json(message)\n| extend internal = iff(tobool(data.internal), 'Internal', 'External')\n| summarize TotalApps = dcount(pid) by internal\n| render list",
            "id": "3e5a0532-b743-4c27-bc78-a6cf6a67278f",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize count = count()",
            "id": "eeb34139-5d30-44cd-9e61-87102b9ad4b9",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter vscodeMachineIdMap on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1)\n| extend internal  = tobool(data.internal)\n| where not(isempty(machineId))\n| summarize operation = dcount(operation_Id) by machineId, internal, bin(timestamp, 1d)\n| where operation >= 2;\nlet internalTable = processedTable\n| where internal == true\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\nlet externalTable = processedTable\n| where internal == false\n| summarize count = dcount(machineId) by bin(timestamp, 1d);\ninternalTable\n| join kind=fullouter externalTable on timestamp\n| extend timestamp = iff(isempty(timestamp), timestamp1, timestamp)\n| extend InternalTotalUsers = iff(isempty(count), 0, count)\n| extend ExternalTotalUsers = iff(isempty(count1), 0, count1)\n| project timestamp, ['Internal Total Users'] = InternalTotalUsers, ['External Total Users'] = ExternalTotalUsers\n| render list",
            "id": "68a5934f-c1e3-4aaa-a749-e374db7e3fff",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| extend count = toint(dimensions.report_issues)\n| summarize TotalApps = sum(count)\n| render list",
            "id": "9fdd6a65-bd12-4d56-9549-513a8202bbf9",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet labelTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/report'\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend labels = tostring(dimensions.report_labels)\n| extend labelList = split(labels, ',')\n| mv-expand labelEle = labelList\n| extend label = tostring(labelEle)\n| project operation_Id, label;\nlet categoryTable = labelTable\n| where label startswith \"category=\"\n| extend category = substring(label, 9);\nlet sourceCategoryTable = labelTable\n| where label startswith \"source-category=\"\n| extend sourceCategory = substring(label, 16);\ncategoryTable\n| join kind=leftouter sourceCategoryTable on operation_Id\n| summarize Count = count() by category, sourceCategory\n| sort by Count desc\n| limit 10\n| project Category = category, [\"Source category\"] = sourceCategory, Count\n| render list",
            "id": "bdbcf45e-c362-40a6-8c75-48dea22b328d",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| summarize count()\n| render list",
            "id": "416c8330-176e-4f3f-a424-5791bf8d8ef8",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| summarize dcount(machineId)\n| render list",
            "id": "0e433442-880d-4907-9297-2c8bffd580ed",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'appcat'\n| summarize ['Analyses'] = dcount(operation_Id), ['Total Users'] = dcount(machineId) by bin(timestamp, 1d)\n| render list",
            "id": "9ebe5171-5032-46d7-ad04-9c964dae46b9",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet tmpTable = RawEventsTraces\n| where timestamp between (start .. end)\n| extend data = parse_json(message)\n| extend dimensions = parse_json(customDimensions)\n| extend machineId = tostring(dimensions.machineid)\n| extend vscodeMachineId = tostring(data.vscodeMachineId);\nlet vscodeMachineIdMap = tmpTable\n| where not(isempty(machineId)) and not(isempty(vscodeMachineId))\n| distinct machineId, vscodeMachineId;\nlet processedTable = tmpTable\n| join kind=leftouter (vscodeMachineIdMap) on machineId\n| extend machineId = iff(isempty(vscodeMachineId1), machineId, vscodeMachineId1);\nprocessedTable\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'Microsoft.migrate-java-to-azure' or caller == 'vscjava.migrate-java-to-azure'\n| summarize ['Analyses'] = dcount(operation_Id), ['Total Users'] = dcount(machineId) by bin(timestamp, 1d)\n| render list",
            "id": "a591c785-80bc-4fa1-9ddc-26f7321202fe",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'appcat'\n| summarize ['CLI Analyses'] = dcount(operation_Id)\n| render list",
            "id": "84860695-d4da-4cc6-8cd6-f69d345a0992",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend caller = tostring(dimensions.callerid)\n| where caller == 'Microsoft.migrate-java-to-azure' or caller == 'vscjava.migrate-java-to-azure'\n| summarize ['VS Code Ext Analysis'] = dcount(operation_Id)\n| render list",
            "id": "9bef559d-1c29-4ed2-a5b7-c9940a8a55c8",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend targets = tostring(dimensions.option_target)\n| extend targetList = split(targets, ',')\n| mv-expand targetEle = targetList\n| extend target = tostring(targetEle)\n| where not(isempty(target))\n| summarize Count = count() by target\n| sort by Count desc\n| render list",
            "id": "112c0b8d-7a9a-4367-969d-3ab3aec44699",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "// let start = startofday(ago(28d));\n// let end   = startofday(now());\n// RawEventsTraces\n// | where timestamp between (start .. end)\n// | where operation_Name == 'java/appcat/command'\n// | extend data = parse_json(message)\n// | extend command = tostring(data.message)\n// | where command == 'analyze'\n// | extend dimensions = parse_json(customDimensions)\n// | extend status = tostring(dimensions.status)\n// | where status == 'end'\n// | extend val = tolong(dimensions.duration)\n// | extend DurationsBucket = case (\n//     val > 3600000,\n//     \"> 1hr\",\n//     val > 1800000 and val <= 3600000,\n//     \"30-60 mins\",\n//     val > 900000 and val <= 1800000,\n//     \"15-30 mins\",\n//     val > 600000 and val <= 900000 ,\n//     \"10-15 mins\",\n//     val > 300000 and val <= 600000 ,\n//     \"5-10 mins\",\n//     val > 300000 and val <= 480000 ,\n//     \"5-8 mins\",\n//     val > 180000 and val <= 300000 ,\n//     \"3-5 mins\",\n//     val > 120000 and val <= 180000 ,\n//     \"2 mins\",\n//     val > 60000 and val <= 120000,\n//     \"1 min\",\n//     val > 30000 and val <= 60000,\n//     \"30-60 seconds\",\n//     \"less than 30 seconds\"\n//   )\n// | summarize Runs=count() by DurationsBucket\n// | order by Runs desc\n// | render list\n\nlet start = startofday(ago(28d));\nlet end   = startofday(now());\nlet reportTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/report'\n| distinct operation_Id;\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| where operation_Id in (reportTable)\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend appcatVersion = tostring(dimensions.appcatversion)\n| where appcatVersion != 'latest'\n| extend status = tostring(dimensions.status)\n| where status == 'end'\n| extend val = tolong(dimensions.duration)\n| extend DurationsBucket = case (\n    val > 3600000,\n    \"> 1hr\",\n    val > 1800000 and val <= 3600000,\n    \"30-60 mins\",\n    val > 900000 and val <= 1800000,\n    \"15-30 mins\",\n    val > 600000 and val <= 900000 ,\n    \"10-15 mins\",\n    val > 300000 and val <= 600000 ,\n    \"5-10 mins\",\n    val > 300000 and val <= 480000 ,\n    \"5-8 mins\",\n    val > 180000 and val <= 300000 ,\n    \"3-5 mins\",\n    val > 120000 and val <= 180000 ,\n    \"2 mins\",\n    val > 60000 and val <= 120000,\n    \"1 min\",\n    val > 30000 and val <= 60000,\n    \"30-60 seconds\",\n    \"less than 30 seconds\"\n  )\n| summarize Runs=count() by DurationsBucket\n| order by Runs desc\n| render list",
            "id": "0479566d-c63a-45df-bfbc-f82e3006fba0",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nlet analyzeTable = RawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status);\nlet startTable = analyzeTable\n| where status == 'start'\n| distinct operation_Id, status;\nlet endTable = analyzeTable\n| where status == 'end'\n| distinct operation_Id, status;\nstartTable\n| join kind=fullouter endTable on operation_Id\n| extend Success = iff(isempty(status1), 'Failed', 'Succeeded')\n| summarize Total = count() by Success\n| render list",
            "id": "9ea5b2fe-fae8-4de9-b1a5-afbd9523e4a0",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let start = startofday(ago(28d));\nlet end   = startofday(now());\nRawEventsTraces\n| where timestamp between (start .. end)\n| where operation_Name == 'java/appcat/command'\n| extend data = parse_json(message)\n| extend command = tostring(data.message)\n| where command == 'analyze'\n| extend dimensions = parse_json(customDimensions)\n| extend status = tostring(dimensions.status)\n| where status == 'start'\n| extend rules = iff(isempty(dimensions.option_rules), 'No custom rules', 'Custom rules')\n| summarize Count = count() by rules\n| render list",
            "id": "228170e6-dd69-4c43-aa61-2737ac64f843",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend pid = tostring(dimensions.project_identity)\n| extend data = parse_json(message)\n| where not(isempty(pid))\n| summarize val = count() by pid\n| extend RunsBucket = case (\n    val > 100,\n    \"> 100\",\n    val > 50 and val <= 100 ,\n    \"51-100\",\n    val > 20 and val <= 50 ,\n    \"21-50\",\n    val > 10 and val <= 20 ,\n    \"11-20\",\n    val > 5 and val <= 10 ,\n    \"6-10\",\n    val > 2 and val <= 5,\n    \"3-5\",\n    val == 2,\n    \"2\",\n    \"1\"\n  )\n| summarize Runs=count() by RunsBucket\n| order by Runs desc\n| render list",
            "id": "8f63c460-e2eb-47ce-a018-bbf2a538ff3d",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = dimensions.callerid\n| where callerId == 'appcat'\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize val = count() by operation_Id\n| extend RunsBucket = case (\n    val > 500,\n    \">500\",\n    val > 100 and val <= 500,\n    \"101-500\",\n    val > 50 and val <= 100,\n    \"51-100\",\n    val > 10 and val <= 50,\n    \"11-50\",\n    val > 5 and val <= 10,\n    \"6-10\",\n    val > 1 and val <= 5,\n    \"2-5\",\n    \"1\"\n  )\n| summarize Issues=count() by RunsBucket\n| order by Issues desc\n| render list",
            "id": "4a23c414-cbe4-4028-ad1c-cb69861633cb",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "RawEventsTraces\n| where timestamp > ago(28d)\n| where operation_Name == 'java/appcat/report'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = dimensions.callerid\n| where callerId == 'Microsoft.migrate-java-to-azure'\n| extend reportType = tostring(dimensions.report_type)\n| where reportType == 'violation'\n| summarize val = count() by operation_Id\n| extend RunsBucket = case (\n    val > 500,\n    \">500\",\n    val > 100 and val <= 500,\n    \"101-500\",\n    val > 50 and val <= 100,\n    \"51-100\",\n    val > 10 and val <= 50,\n    \"11-50\",\n    val > 5 and val <= 10,\n    \"6-10\",\n    val > 1 and val <= 5,\n    \"2-5\",\n    \"1\"\n  )\n| summarize Issues=count() by RunsBucket\n| order by Issues desc\n| render list",
            "id": "451b5851-52b2-4344-a043-e0f02e8dec9c",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n// | where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/panel.request\"\n| where Properties.conversationid in (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n// | where ExtensionName == 'Microsoft.migrate-java-to-azure'\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project Properties.conversationid)\n)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize count=count() ",
            "id": "91eb095b-55d7-461e-ac7a-b494c21ce5d0",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let start=startofday(_startTime);\nlet end=startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n// | where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/panel.request\"\n| where Properties.conversationid in (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (start .. end - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n// | where ExtensionName == 'Microsoft.migrate-java-to-azure'\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project Properties.conversationid, ClientTimestamp)\n)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize count=count() by bin(ClientTimestamp, 1d)",
            "id": "4cd2ce5d-8130-4958-9587-9f0e777a00ef",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "fact_activity_daily_ext\n| where ActivityDay between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ActivityDay >= datetime(2025-05-20)\n| where ExtensionId in (\"microsoft.migrate-java-to-azure\", 'vscjava.migrate-java-to-azure')\n| where Action in ('Install')\n| join kind=leftouter (IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count()",
            "id": "991d81bb-2234-477d-acdb-9c14060659af",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "fact_activity_daily_ext\n| where ActivityDay >= startofday(_startTime) and ActivityDay  <= startofday(_endTime) - 1s\n| where ActivityDay >= datetime(2025-05-20)\n| where ExtensionId in (\"microsoft.migrate-java-to-azure\", 'vscjava.migrate-java-to-azure')\n| where Action in ('Install')\n| join kind=leftouter (IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count() by ActivityDay",
            "id": "f97ab23b-c45a-4281-9f6c-c66a1d959e2e",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| where isnotempty(DevDeviceId)\n| extend m=parse_json(Measures)\n| extend totalTokens=tolong(iif(isnotempty(m['totaltokens']), m['totaltokens'], m['totaltokensused']))\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, EventName, ServerTimestamp\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. _endTime)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. _endTime)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where isnotempty(DevDeviceId)\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project conversationId, totalTokens, DevDeviceId, VSCodeMachineId, ClientTimestamp, ServerTimestamp, EventName\n) on conversationId, DevDeviceId\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, ServerTimestamp, EventName\n| join kind=leftouter (database('VSCodeInsights').IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n)\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize ceiling(sum(totalTokens)/todecimal(dcount(DevDeviceId)))",
            "id": "61068345-ec19-4576-96f5-5c198edae9f0",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where (EventName contains \"java/migrateassistant/llmcall\" or EventName contains \"javaMigrationCopilot/llmcall\")\n| where isnotempty(DevDeviceId)\n| extend m=parse_json(Measures)\n| extend totalTokens=tolong(iif(isnotempty(m['totaltokens']), m['totaltokens'], m['totaltokensused']))\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, EventName, ServerTimestamp\n| union (\n    RawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. _endTime)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"createMigrationPlan\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. _endTime)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where isnotempty(DevDeviceId)\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project conversationId, totalTokens, DevDeviceId, VSCodeMachineId, ClientTimestamp, ServerTimestamp, EventName\n) on conversationId, DevDeviceId\n| distinct VSCodeMachineId, DevDeviceId, totalTokens, ClientTimestamp, ServerTimestamp, EventName\n| join kind=leftouter (database('VSCodeInsights').IdMapping_VSCode_AzureExt | summarize arg_max(DayUsed, DevDeviceId) by VSCodeMachineId) on VSCodeMachineId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n)\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| where isnotempty(DevDeviceId)\n| summarize tokenCount=ceiling(sum(totalTokens) / todecimal(dcount(DevDeviceId))) by bin(ClientTimestamp, 1d)",
            "id": "3ef5076e-c760-4276-831e-5403bf935036",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let start = startofday(ago(28d));\nlet end = startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. (end - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize operation=count() by DevDeviceId\n| where operation >= 2\n| summarize dcount(DevDeviceId)",
            "id": "8c34b00c-535c-4179-8d14-008f3917e062",
            "usedVariables": [
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize operation=count() by DevDeviceId, ClientTimestamp=bin(ClientTimestamp, 1d)\n| where operation >= 2\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp,1d)",
            "id": "da183304-0540-48ce-bf87-89dc3a4bc0ec",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let migrationAppIds = RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p['hashedappid'])\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet appcatAppIds = cluster('ddtelai').database('Copilot').RawEventsTraces\n| where timestamp >= datetime(2025-05-20)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = tostring(dimensions.callerid)\n| where callerId != 'appcat'\n| extend AppId = tostring(dimensions.project_identity), ClientTimestamp = timestamp\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet allAppIds = union migrationAppIds, appcatAppIds;\nallAppIds\n| summarize dcount(AppId)",
            "id": "45f4abc6-7493-4e2e-94f5-bcb1b52f6bde",
            "usedVariables": [
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let excludedAppIds = dynamic([\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\"\n]);\nlet migrationAppIds = RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p['hashedappid'])\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet appcatAppIds = cluster('ddtelai').database('Copilot').RawEventsTraces\n| where timestamp >= datetime(2025-05-20)\n| where operation_Name == 'java/appcat/project'\n| extend dimensions = parse_json(customDimensions)\n| extend callerId = tostring(dimensions.callerid)\n| where callerId != 'appcat'\n| extend AppId = tostring(dimensions.project_identity), ClientTimestamp = timestamp\n| where isnotempty(AppId)\n| project ClientTimestamp, AppId;\nlet allAppIds = union migrationAppIds, appcatAppIds;\nunion\n(\n    allAppIds\n    | summarize count = dcount(AppId) by bin(ClientTimestamp, 1d)\n    | extend AppIdGroup = \"All\"\n),\n(\n    allAppIds\n    | where AppId in (excludedAppIds)\n    | summarize count = dcount(AppId) by bin(ClientTimestamp, 1d)\n    | extend AppIdGroup = \"Samples\"\n)\n| order by ClientTimestamp asc, AppIdGroup",
            "id": "26fc5726-10e9-40a1-b1a4-521103f30a25",
            "usedVariables": [
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "\nlet start=startofday(ago(28d));\nlet end=startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (_startTime .. (end - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize dcount(DevDeviceId)\n",
            "id": "5dcdafe9-fc04-42e9-b837-0b84b174df85",
            "usedVariables": [
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName !contains 'migrate-java-to-azure/info'\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp, 1d)",
            "id": "f5fa177d-1c5e-4196-b1a2-22abccdacb0e",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/change/propose\"\n| extend m=parse_json(Measures)\n| extend lineofchanges=tolong(m['lineofchanges'])\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize lineofchanges=sum(lineofchanges)",
            "id": "3dc21f26-7d7f-4eb3-ad2f-87259cbe545a",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/change/propose\"\n| extend m=parse_json(Measures)\n| extend lineofchanges=tolong(m['lineofchanges'])\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize lineofchanges=sum(lineofchanges) by bin(ClientTimestamp, 1d)",
            "id": "2174c57a-9ae4-4a01-962b-5e319126cadd",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| extend formula=tostring(Properties.formula), result=tostring(Properties.result), isMicrosoft=tobool(Properties.ismicrosoft)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count() by formula, isMicrosoft\n| order by count desc\n| limit 20",
            "id": "be267ed5-c718-4335-a232-e621813a3350",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let start = startofday(ago(28d));\nlet end = startofday(now());\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where Properties contains \"modernization_planner\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| project conversationId=tostring(Properties.conversationid), Properties.toolcounts, VSCodeMachineId, DevDeviceId\n| distinct conversationId, VSCodeMachineId, DevDeviceId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where EventName == \"github.copilot-chat/panel.request\"\n    | extend conversationId=tostring(Properties.conversationid), prompttokencount = tolong(Measures.prompttokencount),\n    messagetokencount = tolong(Measures.messagetokencount),\n    responsetokencount = tolong(Measures.responsetokencount)\n| extend totalTokens = prompttokencount + messagetokencount + responsetokencount\n| project requestId = tostring(Properties.requestid), conversationId, VSCodeMachineId, DevDeviceId\n) on conversationId, VSCodeMachineId, DevDeviceId\n| project requestId\n| distinct requestId\n| join kind=leftouter (\nRawEventsVSCodeExt\n| where ClientTimestamp between (start .. end)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where EventName == \"github.copilot-chat/panel.edit.feedback\"\n| project outcome = tostring(Properties.outcome), requestId = tostring(Properties.requestid), hasRemainingEdits=tobool(Properties.hasremainingedits), DevDeviceId\n) on requestId\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| distinct requestId, outcome, hasRemainingEdits\n| extend outcome=iif(isempty(outcome), 'Implicit accepted', iif(hasRemainingEdits, 'partially accepted', outcome))\n| summarize count() by outcome",
            "id": "1c2af807-27b9-4d84-ae29-4279b2b3b53d",
            "usedVariables": [
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count()",
            "id": "8e804076-aea8-4100-a1bc-f3de1b4b545b",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/search\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)",
            "id": "b1acaf7e-889d-4f0d-aa39-0f9c4f054b1f",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count()",
            "id": "1b9af42a-498d-4ee3-96f2-ed902f76bee9",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize executions=count() by bin(ClientTimestamp, 1d)",
            "id": "136d13e6-cd02-4091-ad13-115e65a7fc49",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize succeeded_ratio = todouble(countif(tostring(Properties.result) == \"SUCCEEDED\")) / count()\n",
            "id": "dd987022-0096-4a21-8bec-67732ec56326",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"javamigrationcopilot/buildfix/output\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize succeeded_ratio = todouble(countif(tostring(Properties.result) == \"SUCCEEDED\")) / count() by bin(ClientTimestamp, 1d)\n",
            "id": "6227b4ed-b2f4-4784-b645-c24913fb85a8",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.run', 'java.migrateassistant.handleMigrate')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where migrateaction == 'migrate'\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count()",
            "id": "d0a0eeb8-52bd-44c6-8f0b-fe932b0b9352",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.run', 'java.migrateassistant.handleMigrate')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where migrateaction == 'migrate'\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize executions=count() by bin(ClientTimestamp, 1d)",
            "id": "96a3aa70-ea58-4f39-9315-1787fb36ca78",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/apply\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count()",
            "id": "cdf2bfd9-af25-4222-b498-d351a4bc43e0",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/apply\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)",
            "id": "1b52da26-4f10-456d-9551-9d148eb0c34e",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/create\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count()",
            "id": "303234b9-61b7-45a7-9922-e5504070eabc",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "let _endOfYesterday = startofday(_endTime);\ndatabase('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (_endOfYesterday - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/formula/create\"\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize totalCount=count() by bin(ClientTimestamp, 1d)",
            "id": "9995f925-0374-4f66-ae09-34e306aeb849",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) == 'migrate.java.formula.importFromLocal'\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count()",
            "id": "79efc414-0a86-4047-bf86-076b22808c68",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) == 'migrate.java.formula.importFromLocal'\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)",
            "id": "450c8d99-f041-4749-97d7-8ee724d70026",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.delete', 'migrate.java.formula.deleteall')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count()",
            "id": "5127368d-3ef6-478d-b1df-6c7955cd3f49",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where command in (\"migrate.java.formula.delete\", \"migrate.java.formula.deleteall\")\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)",
            "id": "d649b24d-f673-40d8-9b57-c0e945f32d82",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| where tostring(Properties.command) in ('migrate.java.formula.export', 'migrate.java.formula.exportall')\n| extend migrateaction=tostring(Properties.migrateaction), formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count()",
            "id": "f7e4fefe-6e53-48e4-8cbf-c91d57ed28b1",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) - 1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend formula=tostring(Properties.formula), command=tostring(Properties.command), prompt=tostring(Properties.prompt)\n| where command in (\"migrate.java.formula.export\", \"migrate.java.formula.exportAll\")\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=count() by bin(ClientTimestamp, 1d)",
            "id": "e4db2094-52a4-4980-bd6d-717c8d6f998e",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(ago(28d)) .. startofday(now())-1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend command = tostring(Properties.command) \n| where isnotempty(command)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize countByUser=dcount(DevDeviceId), arg_max(ClientTimestamp, ExtensionVersion) by command\n| sort by countByUser desc \n| limit 20",
            "id": "6efe0afc-e321-4390-a5a0-cccc9ea99c1e",
            "usedVariables": [
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCode').table('RawEventsVSCode') \n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) -1s)\n// | where EventName == \"monacoworkbench/activateplugin\"\n| where Properties.reasonid == 'vscjava.migrate-java-to-azure'\n| where Properties contains \"onView:azureJavaMigrationExplorer\"\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId)",
            "id": "aff3a8be-688f-4c74-8de1-339a37ba68b5",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCode').table('RawEventsVSCode') \n| where ClientTimestamp between (startofday(_startTime) .. startofday(_endTime) -1s)\n// | where EventName == \"monacoworkbench/activateplugin\"\n| where Properties.reasonid == 'vscjava.migrate-java-to-azure'\n| where Properties contains \"onView:azureJavaMigrationExplorer\"\n| join kind=leftouter database('VSCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| summarize count=dcount(DevDeviceId) by bin(ClientTimestamp, 1d)",
            "id": "3a92d8bf-9dd9-4ed2-9b74-297a3f0c45f7",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(ago(28d)) .. startofday(now())-1s)\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| where EventName contains \"java/migrateassistant/command\"\n| extend command = tostring(Properties.command) \n| where command in ('migrate.java.assessment', 'migrate.java.assessment.solutionReport', 'migrate.java.assessment.summaryReport', 'migrate.java.openSolutionMigrateView')\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| extend command_alias = case(\n    command == 'migrate.java.assessment', 'Run Assessment',\n    command == 'migrate.java.assessment.solutionReport', 'Open Solution Report',\n    command == 'migrate.java.assessment.summaryReport', 'Open Summary Report',\n    command == 'migrate.java.openSolutionMigrateView', 'Open Solution Migration View',\n    command // fallback: keep original if unmatched\n)\n| summarize countByUser=dcount(VSCodeMachineId) by command_alias",
            "id": "1f70dc0c-4146-4871-9285-da7019e7cc89",
            "usedVariables": [
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "//com.microsoft.migration:assets-manager-worker: 87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\n//com.microsoft.migration:assets-manager-web: 324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\n//org.airsonic.player:airsonic: b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\n//org.airsonic.player:subsonic-rest-api: 5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\n//org.airsonic.player:airsonic-sonos-api: 435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\n//org.airsonic.player:airsonic-main: 967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\n//org.airsonic.player:airsonic-docker: 8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\n//org.airsonic.player:airsonic-integration-test: 808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\n//com.microsoft.sqlserver:mssql-jdbc: 52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\n//com.example:messaging-rabbitmq: f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\n\nlet appIdGroupMap = datatable(AppId:string, Sample:string)\n[\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\", \"asset-manager\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\", \"asset-manager\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\", \"airsonic\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\", \"airsonic\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\", \"airsonic\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\", \"airsonic\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\", \"airsonic\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\", \"airsonic\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\", \"mi-sql-public-demo\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\", \"rabbitmq-sender\"\n];\n\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p[\"hashedappid\"])\n| where isnotempty(AppId)\n| join kind=inner appIdGroupMap on AppId\n| join kind=leftouter database(\"VsCodeInsights\").fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), \"Internal Users\", \"External Users\")\n| where iif(user_source == \"internal\", internal == \"Internal Users\", iif(user_source == \"total\", true, internal == \"External Users\"))\n| summarize Runs = dcount(DevDeviceId) by bin(ClientTimestamp, 1d), Sample\n| order by ClientTimestamp asc, Sample\n",
            "id": "80cbc603-1346-4d35-96cd-ca10044915f7",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "326ac282-9931-4458-af0b-a4458e8edd96"
            },
            "text": "//com.microsoft.migration:assets-manager-worker: 87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\n//com.microsoft.migration:assets-manager-web: 324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\n//org.airsonic.player:airsonic: b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\n//org.airsonic.player:subsonic-rest-api: 5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\n//org.airsonic.player:airsonic-sonos-api: 435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\n//org.airsonic.player:airsonic-main: 967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\n//org.airsonic.player:airsonic-docker: 8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\n//org.airsonic.player:airsonic-integration-test: 808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\n//com.microsoft.sqlserver:mssql-jdbc: 52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\n//com.example:messaging-rabbitmq: f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\n\nlet appIdGroupMap = datatable(AppId:string, Sample:string)\n[\n    \"87fed29caa8fb634f6b56b3cbc236f3fc16d5beb034979e358bd9c838d92fb0c\", \"com.microsoft.migration\",\n    \"324480b15b4c36f765c1c461443197d1e2b23f91115f22edb700e40d90da8586\", \"com.microsoft.migration\",\n    \"b2db5d1f438ff5b82e09a714e9cae19f82eae882ca4097724c2848ef50f299e6\", \"org.airsonic.player\",\n    \"5f916b75f2f039574d1d507ba6d0b7198d67cdf5056f0dd8290e2831628f6e8e\", \"org.airsonic.player\",\n    \"435f612e930b646d6627d6d9b621a0e6c5ae7591e0d75455e7c7187ce8e11446\", \"org.airsonic.player\",\n    \"967a5ddd2b0b11a2b910a59f476daed7a75128836ad85bb574240612ab9598aa\", \"org.airsonic.player\",\n    \"8dfd1f9c9d6729775dd858cf29476c62c21eaec9721375d6d43cee2bc455ad81\", \"org.airsonic.player\",\n    \"808655d72a0bbbf7c98f7a501959497b27f43dc54c07caf9b63b1991c007e1c0\", \"org.airsonic.player\",\n    \"52c67183c1ba3f0ef40a25c11d75033ea073ab68d8204bb373ad041f69a7974a\", \"com.microsoft.sqlserver\",\n    \"f0df20177ccc81aa28f5cab74fe95aeebaf99f7b0cf0db3f135a2b3bfcc9752a\", \"com.example\"\n];\n\nRawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend p = parse_json(Properties)\n| extend AppId = tostring(p[\"hashedappid\"])\n| where isnotempty(AppId)\n| join kind=inner appIdGroupMap on AppId\n| join kind=leftouter database(\"VsCodeInsights\").fact_user_isinternal on DevDeviceId\n| extend internal = iff(tobool(IsInternal1), \"Internal Users\", \"External Users\")\n| where iif(user_source == \"internal\", internal == \"Internal Users\", iif(user_source == \"total\", true, internal == \"External Users\"))\n| summarize Runs = dcount(DevDeviceId)\n",
            "id": "800ff8fe-81ad-4cf0-bc3e-0189a29d3e43",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "database('VSCodeExt').RawEventsVSCodeExt\n| where ClientTimestamp between (startofday(_startTime) .. (startofday(_endTime) - 1s))\n| where ClientTimestamp >= datetime(2025-05-20)\n| where ExtensionName contains \"migrate-java-to-azure\"\n| extend error=tostring(Properties.error), formula=tostring(Properties.formula), result=tostring(Properties.result), isMicrosoft=tobool(Properties.ismicrosoft)\n| join kind=leftouter database('VsCodeInsights').fact_user_isinternal on DevDeviceId\n| extend internal  = iff(tobool(IsInternal1), 'Internal Users', 'External Users')\n| where iif(user_source == 'internal', internal == 'Internal Users', iif(user_source == 'total', true, internal == 'External Users'))\n| where isnotempty( error) and error !in (\"F\", \"TypeError\", \"Error\", \"ENOENT\", \"ERR_INVALID_ARG_TYPE\")//skip code bug\n| summarize count=count() by error\n| order by count desc\n| limit 20",
            "id": "efc19d84-89f2-4dbd-8a84-8aeff23bbe72",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nallRuns\n| summarize count = dcount(tool) by session\n| extend label = strcat(iff(count == 1, 'Singel', iff(count == 2, 'Double', 'Triple')), '-product Sessions')\n| summarize Sessions = count() by label",
            "id": "d22d6ca3-a477-4716-afda-3d21b4f3581e",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet sigleToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count == 1\n| distinct session\n| summarize sessionList = make_list(session);\nallRuns\n| where session in (sigleToolSessions)\n| summarize Sessions = count() by tool\n| project Product = tool, Sessions",
            "id": "66a398b9-a4ae-4acd-8b82-5738140c1184",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet multipleToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count > 1\n| distinct session\n| summarize sessionList = make_list(session);\nlet multipleToolRuns = allRuns\n| where session in (multipleToolSessions);\nlet startingTools = multipleToolRuns\n| summarize arg_min(timestamp, tool) by session\n| project session, Starting = tool;\nlet terminalTools = multipleToolRuns\n| summarize arg_max(timestamp, tool) by session\n| project session, Terminal = tool;\nstartingTools\n| join kind=inner terminalTools on session\n| summarize ['Session Count'] = count() by Starting, Terminal",
            "id": "f4a838ab-c7a4-49b6-885d-6f69a34167f3",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet twoToolSessions = allRuns\n| summarize count = dcount(tool) by session\n| where count == 2\n| distinct session\n| summarize sessionList = make_list(session);\nlet twoToolRuns = allRuns\n| where session in (twoToolSessions)\n| distinct session, tool;\ntwoToolRuns\n| sort by session, tool\n| summarize toolList = make_list(tool) by session\n| extend Tools = strcat_array(toolList, ' + ')\n| summarize Sessions = count() by Tools",
            "id": "66d0c63a-4418-4695-a027-49f9339a9158",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet allRuns = languageToolRuns\n| sort by session, timestamp asc;\nallRuns\n| summarize val = count() by session\n| extend RunsBucket = case (\n    val > 100,\n    \"> 100\",\n    val > 50 and val <= 100 ,\n    \"51-100\",\n    val > 20 and val <= 50 ,\n    \"21-50\",\n    val > 10 and val <= 20 ,\n    \"11-20\",\n    val > 5 and val <= 10 ,\n    \"6-10\",\n    val > 2 and val <= 5,\n    \"3-5\",\n    val == 2,\n    \"2\",\n    \"1\"\n  )\n| summarize Sessions=count() by RunsBucket\n| order by Sessions desc\n| project ['Tool Runs'] = RunsBucket, Sessions",
            "id": "3020d630-6ebe-4b9f-9c93-bf32db290cf2",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let appcatRuns = cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Id != operation_ParentId\n| where operation_Name == 'java/appcat/command'\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend tool = 'AppCAT'\n| project timestamp, session = operation_ParentId, tool;\nlet copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet codeRemediationRuns = copilotRuns\n| where Command == 'editAgent' and Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"')\n| extend tool = 'Code Remediation'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet javaUpgradeRuns = copilotRuns\n| where Command == 'editAgent' and Tools has ('javaupgrade_')\n| extend tool = 'Java Upgrade'\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, tool;\nlet allRuns = union appcatRuns, codeRemediationRuns, javaUpgradeRuns\n| sort by session, timestamp asc;\nlet firstSessionRecord = allRuns\n| summarize arg_min(timestamp, timestamp, session) by session\n| project startTime = timestamp, session;\nlet lastSessionRecord = allRuns\n| summarize arg_max(timestamp, timestamp, session) by session\n| project endTime = timestamp, session;\nfirstSessionRecord\n| join kind=inner lastSessionRecord on session\n| extend val = datetime_diff('minute', endTime, startTime)\n| extend Duration = case (\n    val > 120,\n    \"> 2hr\",\n    val > 60 and val <= 120,\n    \"1-2 hr\",\n    val > 30 and val <= 60 ,\n    \"31-60 min\",\n    val > 10 and val <= 30 ,\n    \"11-30 min\",\n    val > 5 and val <= 10 ,\n    \"6-10 min\",\n    val >= 1 and val <= 5 ,\n    \"1-5 min\",\n    \"less than 1 min\"\n  )\n| summarize Sessions=count() by Duration\n| order by Sessions desc",
            "id": "6d9da8e3-2770-48f5-b87a-4aee1239e3a2",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet multipleLanguageToolSessions = languageToolRuns\n| summarize count = dcount(languageTool) by session\n| where count > 1;\nlet multipleLanguageToolRuns = languageToolRuns\n| where session in (multipleLanguageToolSessions);\nlet startingToolCount = multipleLanguageToolRuns\n| summarize arg_min(timestamp, languageTool) by session\n| summarize startingCount = count() by languageTool\n| project languageTool, startingCount;\nlet terminalToolCount = multipleLanguageToolRuns\n| summarize arg_max(timestamp, languageTool) by session\n| summarize terminalCount = count() by languageTool\n| project languageTool, terminalCount;\nstartingToolCount\n| join kind=fullouter terminalToolCount on languageTool\n| extend languageTool = iff(isempty(languageTool), languageTool1, languageTool)\n| extend startingCount = iff(isempty(startingCount), 0, startingCount)\n| extend terminalCount = iff(isempty(terminalCount), 0, terminalCount)\n| extend totalCount = startingCount + terminalCount\n| order by totalCount\n| project ['Language Tool'] = languageTool, ['Starting Count'] = startingCount, ['Terminal Count'] = terminalCount",
            "id": "e98251ee-ba40-4637-bcb1-424b703b5dfa",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "a554a883-4555-4985-be7a-2b5dfaaf0923"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlanguageToolRuns\n| summarize Count = count() by languageTool\n| order by Count\n| project ['Language Tool'] = languageTool, Count",
            "id": "ca130db3-460b-4a18-ba52-cc689c5c8d00",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlanguageToolRuns\n| sort by session, timestamp asc\n| extend next_tool = next(languageTool), next_session = next(session)\n| where session == next_session and languageTool != next_tool\n| summarize Count = count() by languageTool, next_tool\n| sort by Count\n| project Tool = languageTool, ['Next Tool'] = next_tool, Count",
            "id": "4805376b-38f2-4b77-b458-648fe2327e1c",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet terminalToolRuns = languageToolRuns\n| summarize arg_max(timestamp, languageTool) by session;\nlet toolChain = languageToolRuns\n| sort by session, timestamp asc\n| extend prev_tool = prev(languageTool), prev_session = prev(session)\n| where session == prev_session and languageTool != prev_tool;\ntoolChain\n| join kind=inner terminalToolRuns on timestamp, session\n| summarize Count = count() by prev_tool, languageTool\n| sort by Count\n| project Tool = prev_tool, ['Next Tool'] = languageTool, Count",
            "id": "aeac8eb1-3e08-4784-bbf7-a42409a87933",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet terminalToolRuns = languageToolRuns\n| summarize arg_max(timestamp, languageTool) by session;\nlet toolChain = languageToolRuns\n| sort by session, timestamp asc\n| serialize row_id=row_number()\n| extend prev_tool = prev(languageTool), prev_session = prev(session)\n| where session == prev_session and languageTool == prev_tool;\ntoolChain\n| join kind=inner terminalToolRuns on timestamp, session\n| summarize Count = count() by prev_tool, languageTool\n| order by Count\n| project Tool = languageTool, Count",
            "id": "ab70be44-f615-44f5-b40d-1973d909e645",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet singleLanguageToolSessions = languageToolRuns\n| summarize count = dcount(languageTool) by session\n| where count == 1;\nlanguageToolRuns\n| where session in (singleLanguageToolSessions)\n| summarize Count = count() by languageTool\n| order by Count\n| project Tool = languageTool, Count",
            "id": "d8b3868f-44d0-414c-bee7-fec1711a9951",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let copilotRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"GitHub.copilot-chat\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend Command   = tostring(Properties['command']), Tools = tostring(Properties['toolcounts']);\nlet languageToolRuns = copilotRuns\n| where Command == 'editAgent' and (Tools has_any ('\"createMigrationPlan\"', '\"migrateCode\"', '\"migration_codeChange\"', '\"migration_progressTool\"', '\"buildFix_agent\"', '\"buildFix_guideline\"', '\"buildFix_getBuildErrors\"', '\"cve_fixTool\"', '\"assessApplication\"', '\"createMigrationSummary\"') or Tools has ('javaupgrade_'))\n| extend languageTool = extract('\"(.*?)\"', 1, Tools)\n| project timestamp = ServerTimestamp, session = VSCodeSessionId, languageTool;\nlet javaUpgradeErrorSessions = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == \"vscjava.vscode-java-upgrade\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend error = tostring(Properties.errormessage)\n| where isnotempty(error)\n| distinct VSCodeSessionId;\nlet codeRemediationErrorSessions = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| extend error = tostring(Properties.error)\n| where isnotempty(error) and error !in (\"F\", \"TypeError\", \"Error\", \"ENOENT\", \"ERR_INVALID_ARG_TYPE\")\n| distinct VSCodeSessionId;\nlet errorSessions = union javaUpgradeErrorSessions, codeRemediationErrorSessions\n| distinct session = VSCodeSessionId;\nlet errorRuns = languageToolRuns\n| where session in (errorSessions);\nerrorRuns\n| summarize arg_max(timestamp, languageTool) by session\n| summarize terminalCount = count() by languageTool\n| order by terminalCount\n| project ['Language Tool'] = languageTool, ['Terminal Count'] = terminalCount",
            "id": "57fc44ff-21ae-496a-967e-54f9635c6183",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let assessButtonClicks = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| where EventName has 'java/migrateassistant/command'\n| extend command=tostring(Properties.command)\n| where command == 'migrate.java.assessment'\n| summarize count = count()\n| extend stage = \"Assess Button Click\"\n| extend id = 1\n| project id, stage, count;\nlet languageToolRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| where Properties has \"assessApplication\" or Properties has \"modernization_assessor\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| summarize count = count()\n| extend stage = \"Assessor Language Tool Triggered\"\n| extend id = 2\n| project id, stage, count;\nlet appcatRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Name == \"java/appcat/command\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend message = parse_json(message)\n| extend command = tostring(message.message)\n| where command == \"analyze\"\n| extend customDimensions = parse_json(customDimensions)\n| extend status = tostring(customDimensions.status)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\";\nlet appcatRunsCount = appcatRuns\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT CLI Triggered\"\n| extend id = 3\n| project id, stage, count;\nlet appcatRunsSuccess = appcatRuns\n| where status == \"end\"\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT CLI Run Success\"\n| extend id = 4\n| project id, stage, count;\nlet appcatReportRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Name == \"java/appcat/report\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend customDimensions = parse_json(customDimensions)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| distinct operation_Id\n| summarize count = count()\n| extend stage = \"AppCAT Report Gernerated\"\n| extend id = 5\n| project id, stage, count;\nunion assessButtonClicks, languageToolRuns, appcatRunsCount, appcatRunsSuccess, appcatReportRuns\n| order by id asc",
            "id": "75c449c8-e776-431c-ac8a-6e5872d41800",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "be95c5c9-47ce-475a-b1e1-cd32cc5270cc"
            },
            "text": "let assessButtonClicks = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName has \"migrate-java-to-azure\"\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| where EventName has 'java/migrateassistant/command'\n| extend command=tostring(Properties.command)\n| where command == 'migrate.java.assessment'\n| summarize count = dcount(DevDeviceId)\n| extend stage = \"Assess Button Click\"\n| extend id = 1\n| project id, stage, count;\nlet languageToolRuns = cluster('ddtelvscode.kusto.windows.net').database('VSCodeExt').RawEventsVSCodeExt\n| where ServerTimestamp between (_startTime .. _endTime)\n| where ExtensionName == 'GitHub.copilot-chat'\n| where user_source == 'total' or user_source == 'internal' and IsInternal or user_source == 'external' and not(IsInternal)\n| where Properties has \"assessApplication\" or Properties has \"modernization_assessor\"\n| where EventName == \"github.copilot-chat/toolcalldetails\"\n| summarize count = dcount(DevDeviceId)\n| extend stage = \"Assessor Language Tool Triggered\"\n| extend id = 2\n| project id, stage, count;\nlet appcatRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Name == \"java/appcat/command\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend message = parse_json(message)\n| extend command = tostring(message.message)\n| where command == \"analyze\"\n| extend customDimensions = parse_json(customDimensions)\n| extend status = tostring(customDimensions.status)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| extend machineId = tostring(customDimensions.machineid);\nlet appcatRunsCount = appcatRuns\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT CLI Triggered\"\n| extend id = 3\n| project id, stage, count;\nlet appcatRunsSuccess = appcatRuns\n| where status == \"end\"\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT CLI Run Success\"\n| extend id = 4\n| project id, stage, count;\nlet appcatReportRuns =  cluster('ddtelai.kusto.windows.net').database('Copilot').RawEventsTraces\n| where timestamp between (_startTime .. _endTime)\n| where operation_Name == \"java/appcat/report\"\n| extend message = parse_json(message)\n| extend internal = tobool(message.internal)\n| where user_source == 'total' or user_source == 'internal' and internal or user_source == 'external' and not(internal)\n| extend customDimensions = parse_json(customDimensions)\n| extend callerId = tostring(customDimensions.callerid)\n| where callerId has \"migrate-java-to-azure\"\n| extend machineId = tostring(customDimensions.machineid)\n| distinct machineId\n| summarize count = count()\n| extend stage = \"AppCAT Report Gernerated\"\n| extend id = 5\n| project id, stage, count;\nunion assessButtonClicks, languageToolRuns, appcatRunsCount, appcatRunsSuccess, appcatReportRuns\n| order by id asc",
            "id": "ad8d7e7b-bf15-4c17-a1c1-6ace3fe56a54",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "user_source"
            ]
        }
    ]
}
